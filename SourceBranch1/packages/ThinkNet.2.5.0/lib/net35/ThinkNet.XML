<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThinkNet</name>
    </assembly>
    <members>
        <member name="T:ThinkNet.Bootstrapper">
            <summary>
            系统引导程序
            </summary>
        </member>
        <member name="M:ThinkNet.Bootstrapper.SetContainerProvider(System.Func{ThinkNet.Infrastructure.IObjectContainer})">
            <summary>
            设置IOC容器
            </summary>
        </member>
        <member name="M:ThinkNet.Bootstrapper.Register``1(``0)">
            <summary>
            注册类型的实例
            </summary>
        </member>
        <member name="M:ThinkNet.Bootstrapper.Register(System.Object,System.Type[])">
            <summary>
            注册类型的实例
            </summary>
        </member>
        <member name="M:ThinkNet.Bootstrapper.Register``2(ThinkNet.Infrastructure.LifetimeStyle)">
            <summary>
            类型注册(默认生命周期是单例)
            </summary>
        </member>
        <member name="M:ThinkNet.Bootstrapper.Register(System.Type,System.Type,ThinkNet.Infrastructure.LifetimeStyle)">
            <summary>
            类型注册(默认生命周期是单例)
            </summary>
        </member>
        <member name="M:ThinkNet.Bootstrapper.LoadAssemblies(System.Reflection.Assembly[])">
            <summary>
            加载程序集
            </summary>
        </member>
        <member name="M:ThinkNet.Bootstrapper.LoadAssemblies(System.String[])">
            <summary>
            加载程序集
            </summary>
        </member>
        <member name="M:ThinkNet.Bootstrapper.LoadAssemblies">
            <summary>
            扫描bin目录的程序集
            </summary>
        </member>
        <member name="M:ThinkNet.Bootstrapper.Run">
            <summary>
            启动运行
            </summary>
        </member>
        <member name="P:ThinkNet.Bootstrapper.Current">
            <summary>
            当前的引导程序
            </summary>
        </member>
        <member name="T:ThinkNet.Cache.CacheManager">
            <summary>
            缓存管理
            </summary>
        </member>
        <member name="F:ThinkNet.Cache.CacheManager.CacheRegion">
            <summary>
            默认缓存区域名称
            </summary>
        </member>
        <member name="F:ThinkNet.Cache.CacheManager.Instance">
            <summary>
            single instance
            </summary>
        </member>
        <member name="M:ThinkNet.Cache.CacheManager.SetProvider(System.Func{ThinkNet.Cache.ICacheProvider})">
            <summary>
            设置缓存
            </summary>
        </member>
        <member name="M:ThinkNet.Cache.CacheManager.SetProvider(System.Func{ThinkNet.Cache.ICacheProvider},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            设置缓存
            </summary>
        </member>
        <member name="M:ThinkNet.Cache.CacheManager.Put(System.String,System.Object)">
            <summary>
            向缓存中添加一个对象。
            </summary>
            <param name="key">缓存值的键值。</param>
            <param name="value">需要缓存的对象。</param>
        </member>
        <member name="M:ThinkNet.Cache.CacheManager.Put(System.String,System.String,System.Object)">
            <summary>
            向缓存中添加一个对象。
            </summary>
            <param name="region">缓存的区域。</param>
            <param name="key">缓存值的键值。</param>
            <param name="value">需要缓存的对象。</param>
        </member>
        <member name="M:ThinkNet.Cache.CacheManager.Get(System.String)">
            <summary>
            从缓存中读取对象。
            </summary>
            <param name="key">缓存值的键值。</param>
            <returns>被缓存的对象。</returns>
        </member>
        <member name="M:ThinkNet.Cache.CacheManager.Get(System.String,System.String)">
            <summary>
            从缓存中读取对象。
            </summary>
            <param name="region">缓存的区域。</param>
            <param name="key">缓存值的键值。</param>
            <returns>被缓存的对象。</returns>
        </member>
        <member name="M:ThinkNet.Cache.CacheManager.Remove(System.String)">
            <summary>
            从缓存中移除对象。
            </summary>
            <param name="key">缓存的键值。</param>
            <returns>被缓存的对象。</returns>
        </member>
        <member name="M:ThinkNet.Cache.CacheManager.Remove(System.String,System.String)">
            <summary>
            从缓存中移除对象。
            </summary>
            <param name="region">缓存的区域。</param>
            <param name="key">缓存值的键值。</param>
        </member>
        <member name="M:ThinkNet.Cache.CacheManager.Evict(System.String)">
            <summary>
            从缓存中移除对象。
            </summary>
            <param name="region">区域</param>
        </member>
        <member name="T:ThinkNet.Cache.CachingAttribute">
            <summary>
            表示由此特性所描述的方法，能够获得框架所提供的缓存功能。
            </summary>
        </member>
        <member name="T:ThinkNet.Cache.CacheRegionAttribute">
            <summary>
            表示定义缓存区域策略的特性
            </summary>
        </member>
        <member name="M:ThinkNet.Cache.CacheRegionAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Cache.CacheRegionAttribute.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkNet.Cache.CacheRegionAttribute.CacheRegion">
            <summary>
            区域名称
            </summary>
        </member>
        <member name="M:ThinkNet.Cache.CachingAttribute.#ctor(ThinkNet.Cache.CachingMethod)">
            <summary>
            Parameterized Constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Cache.CachingAttribute.#ctor(ThinkNet.Cache.CachingMethod,System.String[])">
            <summary>
            Parameterized Constructor.
            </summary>
        </member>
        <member name="P:ThinkNet.Cache.CachingAttribute.Method">
            <summary>
            获取或设置缓存方式。
            </summary>
        </member>
        <member name="P:ThinkNet.Cache.CachingAttribute.CacheKey">
            <summary>
            缓存标识
            </summary>
        </member>
        <member name="P:ThinkNet.Cache.CachingAttribute.RelatedAreas">
            <summary>
            获取与当前缓存方式相关的区域名称。注：此参数仅在缓存方式为Remove时起作用。
            </summary>
        </member>
        <member name="T:ThinkNet.Cache.CachingMethod">
            <summary>
            表示用于缓存特性的缓存方式。
            </summary>
        </member>
        <member name="F:ThinkNet.Cache.CachingMethod.Get">
            <summary>
            表示需要从缓存中获取对象。如果缓存中不存在所需的对象，系统则会调用实际的方法获取对象，然后将获得的结果添加到缓存中。
            </summary>
        </member>
        <member name="F:ThinkNet.Cache.CachingMethod.Put">
            <summary>
            表示需要将对象存入缓存。此方式会调用实际方法以获取对象，然后将获得的结果添加到缓存中，并直接返回方法的调用结果。
            </summary>
        </member>
        <member name="F:ThinkNet.Cache.CachingMethod.Remove">
            <summary>
            表示需要将对象从缓存中移除。
            </summary>
        </member>
        <member name="T:ThinkNet.Cache.ICache">
            <summary>
            缓存接口
            </summary>
        </member>
        <member name="M:ThinkNet.Cache.ICache.Get(System.String)">
            <summary>
            从缓存获取对象实例。
            </summary>
        </member>
        <member name="M:ThinkNet.Cache.ICache.Put(System.String,System.Object)">
            <summary>
            放此对象实例放入缓存。
            </summary>
        </member>
        <member name="M:ThinkNet.Cache.ICache.Remove(System.String)">
            <summary>
            从缓存移除该键值对应的对象实例。
            </summary>
        </member>
        <member name="M:ThinkNet.Cache.ICache.Clear">
            <summary>
            清空缓存。
            </summary>
        </member>
        <member name="M:ThinkNet.Cache.ICache.Destroy">
            <summary>
            销毁缓存。
            </summary>
        </member>
        <member name="P:ThinkNet.Cache.ICache.RegionName">
            <summary>
            获取此缓存的区域名称。
            </summary>
        </member>
        <member name="T:ThinkNet.Cache.HashtableCacheProvider">
            <summary>
            .Net Hashtable
            </summary>
        </member>
        <member name="T:ThinkNet.Cache.ICacheProvider">
            <summary>
            缓存支持
            </summary>
        </member>
        <member name="M:ThinkNet.Cache.ICacheProvider.BuildCache(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            建造缓存区。
            </summary>
            <param name="regionName">缓存区域的名称</param>
            <param name="properties">配置项</param>
        </member>
        <member name="M:ThinkNet.Cache.HashtableCacheProvider.BuildCache(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Cache.WebCacheConfig.#ctor(System.String,System.String,System.String)">
            <summary>
            build a configuration
            </summary>
        </member>
        <member name="T:ThinkNet.Cache.WebCacheProvider">
            <summary>
            .Net WebCache
            </summary>
        </member>
        <member name="M:ThinkNet.Cache.WebCacheProvider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Cache.WebCacheProvider.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Cache.WebCacheProvider.BuildCache(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            创建区域缓存
            </summary>
        </member>
        <member name="T:ThinkNet.Cache.WebCacheSectionHandler">
            <summary>
            webcache配置节点的访问
            </summary>
        </member>
        <member name="F:ThinkNet.Cache.WebCacheSectionHandler.SectionName">
            <summary>
            配置节点名称
            </summary>
        </member>
        <member name="M:ThinkNet.Cache.WebCacheSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            parse the config section
            </summary>
            <returns>an array of CacheConfig objects</returns>
        </member>
        <member name="T:ThinkNet.Database.AggregateRoot`1">
            <summary>
            实现 <see cref="T:ThinkNet.Database.IAggregateRoot"/> 的抽象类
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Entity`1">
            <summary>
            <see cref="T:ThinkNet.Database.IEntity"/> 的抽象实现类。
            </summary>
        </member>
        <member name="T:ThinkNet.Database.IEntity">
            <summary>
            表示继承该接口的类型是一个实体。
            </summary>
        </member>
        <member name="P:ThinkNet.Database.IEntity.Id">
            <summary>
            主键标识
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Entity`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Entity`1.#ctor(`0)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Entity`1.Equals(System.Object)">
            <summary>
            确定此实例是否与指定的对象相同。
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Entity`1.GetHashCode">
            <summary>
            返回此实例的哈希代码
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Entity`1.ToString">
            <summary>
            输出字符串格式
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Entity`1.op_Equality(ThinkNet.Database.Entity{`0},ThinkNet.Database.Entity{`0})">
            <summary>
            判断两个实例是否相同
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Entity`1.op_Inequality(ThinkNet.Database.Entity{`0},ThinkNet.Database.Entity{`0})">
            <summary>
            判断两个实例是否不相同
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Entity`1.Id">
            <summary>
            标识ID
            </summary>
        </member>
        <member name="T:ThinkNet.Database.IAggregateRoot">
            <summary>
            表示继承该接口的类型是一个聚合根
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.IEventPublisher">
            <summary>
            表示继续该接口的是一个事件发布程序。
            </summary>
        </member>
        <member name="P:ThinkNet.Messaging.IEventPublisher.Events">
            <summary>
            获取即将发布的事件。
            </summary>
        </member>
        <member name="M:ThinkNet.Database.AggregateRoot`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.AggregateRoot`1.#ctor(`0)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.AggregateRoot`1.RaiseEvent``1(``0)">
            <summary>
            筹集事件
            </summary>
        </member>
        <member name="M:ThinkNet.Database.AggregateRoot`1.GetUnpublishedEvents">
            <summary>
            获取未发布的事件集合。
            </summary>
        </member>
        <member name="M:ThinkNet.Database.AggregateRoot`1.ClearEvents">
            <summary>
            清除事件。
            </summary>
        </member>
        <member name="T:ThinkNet.Database.AggregateRootException">
            <summary>Represents an exception when tring to get a not existing aggregate root.
            </summary>
        </member>
        <member name="T:ThinkNet.ThinkNetException">
            <summary>
            表示框架执行过程发生的错误
            </summary>
        </member>
        <member name="M:ThinkNet.ThinkNetException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.ThinkNetException.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.ThinkNetException.#ctor(System.String,System.Exception)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.AggregateRootException.#ctor(System.Type,System.Object)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.AggregateRootException.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.AggregateRootException.#ctor(System.String,System.Exception)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="T:ThinkNet.BootstrapperExtentions">
            <summary>
            <see cref="T:ThinkNet.Bootstrapper"/> 的扩展
            </summary>
        </member>
        <member name="M:ThinkNet.BootstrapperExtentions.RegisterDatabaseFactory(ThinkNet.Bootstrapper,System.String)">
            <summary>
            注册创建数据访问工厂
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Context.ContextFactory">
            <summary>
            <see cref="T:ThinkNet.Infrastructure.Context.IContextFactory"/> 的抽象实现类
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Context.IContextFactory">
            <summary>
            实现上下文的工厂接口
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Context.IContextFactory.Id">
            <summary>
            上下文工厂标识
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Context.IContextFactory.CurrentContext">
            <summary>
            获取当前的上下文
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Context.ContextFactory.#ctor">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Context.ContextFactory.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Context.ContextFactory.Id">
            <summary>
            标识
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Context.ContextFactory.ContextType">
            <summary>
            上下文类型
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Context.ContextFactory.CurrentContext">
            <summary>
            获取当前的上下文
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Common.IDatabaseFactory">
            <summary>
            表示创建数据访问的工厂
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabaseFactory.GetCurrentDatabase">
            <summary>
            获取当前上下文的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabaseFactory.CreateDatabase">
            <summary>
            创建默认的数据访问实例
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabaseFactory.CreateDatabase(System.String)">
            <summary>
            根据数据连接字符串创建数据访问实例
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabaseFactory.CreateDatabase(System.Data.IDbConnection)">
            <summary>
            根据数据连接创建数据访问实例
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Common.Database">
            <summary>
            数据访问基类
            </summary>
        </member>
        <member name="T:ThinkNet.DisposableObject">
            <summary>
            表示派生对象是需要释放资源的
            </summary>
        </member>
        <member name="M:ThinkNet.DisposableObject.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:ThinkNet.DisposableObject.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">表示对象是否应该明确处理</param>
        </member>
        <member name="M:ThinkNet.DisposableObject.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Common.IDatabase">
            <summary>
            数据接口
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行当前数据库连接对象的命令,指定参数.
            </summary>
            <remarks>
            示例: int result = ExecuteNonQuery(CommandType.StoredProcedure, "PublishOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本,其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParamter参数数组(无参数请写(DbParameter[])null)</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.ExecuteReader(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行当前数据库连接对象的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例: IDataReader dr = ExecuteReader(CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParamter参数数组(无参数请写(DbParameter[])null)</param>
            <returns>返回包含结果集的IDataReader</returns>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.ExecuteScalar(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例: int orderCount = (int)ExecuteScalar(CommandType.StoredProcedure, "GetOrderCount", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParamter参数数组(无参数请写(DbParameter[])null)</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.ExecuteDataset(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,指定参数值.返回DataSet.
            </summary>
            <remarks>
            示例: DataSet ds = ExecuteDataset(CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParamter参数数组(无参数请写(DbParameter[])null)</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.CreateInParameter(System.String,System.Object)">
            <summary>
            Command对象的传入参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="value">值</param>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.CreateInParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            Command对象的传入参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="dbType">数据类型</param>
            <param name="size">数据长度</param>
            <param name="value">值</param>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.CreateOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Command对象的传出参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="dbType">数据类型</param>
            <param name="size">数据长度</param>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.CreateOutParameter(System.String)">
            <summary>
            Command对象的传出参数
            </summary>
            <param name="paramName">参数名称</param>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.Reconnect">
            <summary>
            重新连接数据库
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.Disconnect">
            <summary>
            断开数据库连接
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.BeginTransaction">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.Table(System.String)">
            <summary>
            设置表名称
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.Data(ThinkNet.Database.Common.SqlData[])">
            <summary>
            设置insert/update的字段
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.Where(ThinkNet.Database.Common.SqlWhere[])">
            <summary>
            设定查询条件
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.Distinct">
            <summary>
            消除重复项
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.Field(ThinkNet.Database.Common.SqlField[])">
            <summary>
            设置查询的字段
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.GroupBy">
            <summary>
            分组查询(前提是必须指定Fileds)
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.Having(ThinkNet.Database.Common.SqlHaving[])">
            <summary>
            过滤
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.OrderBy(ThinkNet.Database.Common.SqlOrder[])">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.Limit(System.Int32,System.Int32)">
            <summary>
            显示分页数据
            </summary>
            <param name="page">页码(从1开始)</param>
            <param name="rows">每页显示的行数</param>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.Find">
            <summary>
            找到一条记录键与值的集合
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.FindAll">
            <summary>
            找到所有记录集的集合
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.FindAll(System.Int64@)">
            <summary>
            找到所有记录集的集合并输出记录总数
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.Delete">
            <summary>
            删除符合条件的数据
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.Insert(System.Int64@)">
            <summary>
            插入数据后并返回数据库提供的自动增量
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.Insert">
            <summary>
            插入数据
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.IDatabase.Update">
            <summary>
            更新符合条件的数据
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Common.IDatabase.DbConnection">
            <summary>
            当前的数据库连接
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Common.IDatabase.Transaction">
            <summary>
            当前执行的事务
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Context.IContext">
            <summary>
            表示继承该接口的是一个上下文
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Context.IContext.ContextFactory">
            <summary>
            获取当前的factory
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.DeriveParameters(System.Data.Common.DbCommand)">
            <summary>
            检索SQL参数信息并填充
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.GetIdentitySql">
            <summary>
            获取主键id的T-SQL
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.GetTableColumns(System.String)">
            <summary>
            获取表字典信息
            </summary>
            <param name="tableName">表名</param>
            <returns>模型字段集合</returns>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.PagingSupport(System.Int32,System.Int32)">
            <summary>
            提供分页支持的T-SQL
            </summary>
            <param name="pageIndex">页索引</param>
            <param name="pageSize">每页显示记录条数</param>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.BuildLikeParameterName(System.String)">
            <summary>
            构造模糊查询参数名称
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.CreateConnection">
            <summary>
            为当前对象创建一个数据连接
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.CreateCommand">
            <summary>
            创建数据库命令
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.CreateCommandByCommandType(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            创建一个DbCommand
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.CreateParameter">
            <summary>
            创建数据库命令参数
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.#ctor(System.Data.IDbConnection)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.#ctor(System.String,ThinkNet.Infrastructure.Context.IContextFactory)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.Reconnect">
            <summary>
            尝试重新连接数据库
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.Disconnect">
            <summary>
            断开数据库连接
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.BeginTransaction">
            <summary>
            开始事务
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行当前数据库连接对象的命令,指定参数.
            </summary>
            <remarks>
            示例: int result = ExecuteNonQuery(CommandType.StoredProcedure, "PublishOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParamter参数数组(无参数请写(DbParameter[])null)</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.ExecuteReader(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行当前数据库连接对象的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例: IDataReader dr = ExecuteReader(CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParamter参数数组(无参数请写(DbParameter[])null)</param>
            <returns>返回包含结果集的IDataReader</returns>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.ExecuteScalar(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例: int orderCount = (int)ExecuteScalar(CommandType.StoredProcedure, "GetOrderCount", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParamter参数数组(无参数请写(DbParameter[])null)</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.ExecuteDataset(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,指定参数值.返回DataSet.
            </summary>
            <remarks>
            示例: DataSet ds = ExecuteDataset(CommandType.StoredProcedure, "GetOrders", new DbParameter("@prodid", 24));
            </remarks>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">分配给命令的DbParamter参数数组(无参数请写(DbParameter[])null)</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.CreateInParameter(System.String,System.Object)">
            <summary>
            Command对象的传入参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="value">值</param>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.CreateInParameter(System.String,System.Data.DbType,System.Int32,System.Object)">
            <summary>
            Command对象的传入参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="dbType">数据类型</param>
            <param name="size">数据长度</param>
            <param name="value">值</param>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.CreateInParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            Command对象的传入参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="dbType">数据类型</param>
            <param name="value">值</param>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.CreateOutParameter(System.String,System.Data.DbType,System.Int32)">
            <summary>
            Command对象的传出参数
            </summary>
            <param name="paramName">参数名称</param>
            <param name="dbType">数据类型</param>
            <param name="size">数据长度</param>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.CreateOutParameter(System.String)">
            <summary>
            Command对象的传出参数
            </summary>
            <param name="paramName">参数名称</param>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.BuildParameterName(System.String)">
            <summary>
            Builds a value parameter name for the current database.
            </summary>
            <param name="name">The name of the parameter.</param>
            <returns>A correctly formated parameter name.</returns>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.Dispose(System.Boolean)">
            <summary>
            释放数据库连接
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.Reset">
            <summary>
            恢复各字段初始化状态
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.Table(System.String)">
            <summary>
            设置表名称
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.Data(ThinkNet.Database.Common.SqlData[])">
            <summary>
            设置添加/修改数据
            </summary>
            <param name="datas"><see cref="T:ThinkNet.Database.Common.SqlData"/>类的数组形式</param>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.Where(ThinkNet.Database.Common.SqlWhere[])">
            <summary>
            设置查询条件
            </summary>
            <param name="conditions">查询类数组</param>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.Distinct">
            <summary>
            过滤重复记录
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.Field(ThinkNet.Database.Common.SqlField[])">
            <summary>
            设置显示字段
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.GroupBy">
            <summary>
            设定分组字段来自Fields
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.Having(ThinkNet.Database.Common.SqlHaving[])">
            <summary>
            设置合计函数过滤条件
            </summary>
            <param name="conditions">过滤条件数组</param>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.OrderBy(ThinkNet.Database.Common.SqlOrder[])">
            <summary>
            排序
            </summary>
            <param name="orders">排序类数组</param>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.Limit(System.Int32,System.Int32)">
            <summary>
            显示分页数据
            </summary>
            <param name="page">页码(从1开始)</param>
            <param name="rows">每页显示的行数</param>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.Find(System.Object[])">
            <summary>
            根据数据主键值查找当前记录
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.Find">
            <summary>
            根据Where条件查找当前首条记录
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.FindAll">
            <summary>
            查询结果集
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.FindAll(System.Int64@)">
            <summary>
            查询结果
            </summary>
            <param name="total">记录总数</param>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.Delete">
            <summary>
            删除操作
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.Insert(System.Int64@)">
            <summary>
            新增数据并返回数据库提供的自动增量
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.Insert">
            <summary>
            保存数据
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.Database.Update">
            <summary>
            更新数据
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Common.Database.DbConnection">
            <summary>
            当前的数据源连接
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Common.Database.Transaction">
            <summary>
            当前的数据源事务
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Common.Database.Logger">
            <summary>
            写日志程序
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Common.DatabaseException">
            <summary>
            数据访问异常 
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseException.#ctor">
            <summary>Default constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseException.#ctor(System.String)">
            <summary>Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseException.#ctor(System.String,System.Exception)">
            <summary>Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseException.#ctor(System.String,System.Object[])">
            <summary>Parameterized constructor.
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Common.DatabaseExtentions">
            <summary>
            <see cref="T:ThinkNet.Database.Common.IDatabase"/> 扩展类
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.ExecuteNonQuery(ThinkNet.Database.Common.IDatabase,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            执行当前数据库连接对象的命令,指定参数.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.ExecuteReader(ThinkNet.Database.Common.IDatabase,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            执行当前数据库连接对象的数据阅读器,指定参数.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.ExecuteScalar(ThinkNet.Database.Common.IDatabase,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDbDataParameter})">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.CreateInParameter(ThinkNet.Database.Common.IDatabase,System.String,System.Data.DbType,System.Object)">
            <summary>
            Command对象的传入参数
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.CreateOutParameter(ThinkNet.Database.Common.IDatabase,System.String,System.Data.DbType)">
            <summary>
            Command对象的输出参数
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.Data(ThinkNet.Database.Common.IDatabase,System.Collections.IDictionary)">
            <summary>
            设置添加/修改数据
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.Where(ThinkNet.Database.Common.IDatabase,System.String,System.Object)">
            <summary>
            设置查询条件
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.Where(ThinkNet.Database.Common.IDatabase,System.String,ThinkNet.Database.Common.DbJudgeSymbol,System.Object)">
            <summary>
            设置查询条件
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.Where(ThinkNet.Database.Common.IDatabase,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            设置查询条件
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.Where(ThinkNet.Database.Common.IDatabase,System.Collections.Generic.IEnumerable{ThinkNet.Database.Common.SqlWhere})">
            <summary>
            设置查询条件
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.SetField(ThinkNet.Database.Common.IDatabase,System.String,System.Object)">
            <summary>
            设置字段更新
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.SetIncrement(ThinkNet.Database.Common.IDatabase,System.String,System.Int32)">
            <summary>
            统计字段更新(+)
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.SetDecrement(ThinkNet.Database.Common.IDatabase,System.String,System.Int32)">
            <summary>
            统计字段更新(-)
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.GetField``1(ThinkNet.Database.Common.IDatabase,System.String)">
            <summary>
            获取单个字段的值
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.Count(ThinkNet.Database.Common.IDatabase)">
            <summary>
            求总个数
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.Avg``1(ThinkNet.Database.Common.IDatabase,System.String)">
            <summary>
            求平均值
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.Sum``1(ThinkNet.Database.Common.IDatabase,System.String)">
            <summary>
            求汇总值
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.Max``1(ThinkNet.Database.Common.IDatabase,System.String)">
            <summary>
            求最大值
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.Min``1(ThinkNet.Database.Common.IDatabase,System.String)">
            <summary>
            求最小值
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.Exist(ThinkNet.Database.Common.IDatabase)">
            <summary>
            是否存在符合条件的记录
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.Field(ThinkNet.Database.Common.IDatabase,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            设置查询字段
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.Field(ThinkNet.Database.Common.IDatabase,System.String[])">
            <summary>
            设置显示字段
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.Field(ThinkNet.Database.Common.IDatabase,System.Collections.Generic.IEnumerable{ThinkNet.Database.Common.SqlField})">
            <summary>
            设置显示字段
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.Having(ThinkNet.Database.Common.IDatabase,ThinkNet.Database.Common.DbAggrefunc,System.String,System.Object)">
            <summary>
            设置合计函数过滤条件
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.Having(ThinkNet.Database.Common.IDatabase,ThinkNet.Database.Common.DbAggrefunc,System.String,ThinkNet.Database.Common.DbJudgeSymbol,System.Object)">
            <summary>
            设置合计函数过滤条件
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.Having(ThinkNet.Database.Common.IDatabase,System.Collections.Generic.IEnumerable{ThinkNet.Database.Common.SqlHaving})">
            <summary>
            设置合计函数过滤条件
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.OrderBy(ThinkNet.Database.Common.IDatabase,System.String,ThinkNet.Database.Common.DbOrderType)">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.OrderBy(ThinkNet.Database.Common.IDatabase,System.Collections.Generic.IEnumerable{ThinkNet.Database.Common.SqlOrder})">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.Limit(ThinkNet.Database.Common.IDatabase,System.Int32)">
            <summary>
            显示TopN条数据
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.Find(ThinkNet.Database.Common.IDatabase,System.String,System.Object[])">
            <summary>
            根据数据主键值查找当前记录
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.FindAll``1(ThinkNet.Database.Common.IDatabase,System.String,``0[])">
            <summary>
            查询结果集
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.Delete(ThinkNet.Database.Common.IDatabase,System.String,System.Object[])">
            <summary>
            根据主键ID删除数据
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.Update(ThinkNet.Database.Common.IDatabase,System.String,System.Object[])">
            <summary>
            根据主键ID更新数据
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.DeleteAll``1(ThinkNet.Database.Common.IDatabase,System.String,``0[])">
            <summary>
            删除符合主键id的多条记录
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseExtentions.UpdateAll``1(ThinkNet.Database.Common.IDatabase,System.String,``0[])">
            <summary>
            批量符合主键id的多条记录
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Common.DatabaseSectionHandler">
            <summary>
            database factory配置节
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DatabaseSectionHandler.SectionName">
            <summary>
            配置节点名称
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.DatabaseSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            创建工厂信息
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Common.SqlData">
            <summary>
            用于向数据库中添加/修改的数据类
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlData.#ctor(System.String,System.Int32)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlData.#ctor(System.String,System.Decimal)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlData.#ctor(System.String,System.DateTime)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlData.#ctor(System.String,System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlData.#ctor(System.String,System.Object)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Common.SqlData.SafetyValue">
            <summary>
            表示这是一个安全的值。
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Common.SqlData.Value">
            <summary>
            对应的值
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Common.SqlData.Name">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Common.SqlField">
            <summary>
            查询字段
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlField.#ctor(System.String)">
            <summary>
            用字段名称构造实例
            </summary>
            <param name="name">字段名称</param>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlField.#ctor(System.String,System.String)">
            <summary>
            用字段名称和别名构造实例
            </summary>
            <param name="name">字段名称</param>
            <param name="alias">别名</param>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlField.#ctor(ThinkNet.Database.Common.DbAggrefunc,System.String)">
            <summary>
            用合计函数类型和字段名称构造实例
            </summary>
            <param name="func">合计函数类型</param>
            <param name="name">字段名称</param>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlField.#ctor(ThinkNet.Database.Common.DbAggrefunc,System.String,System.String)">
            <summary>
            用合计函数类型、字段名前缀和字段名称构造实例
            </summary>
            <param name="func">合计函数类型</param>
            <param name="name">字段名称</param>
            <param name="alias">别名</param>
        </member>
        <member name="P:ThinkNet.Database.Common.SqlField.Name">
            <summary>
            字段名
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Common.SqlField.Aggrefunc">
            <summary>
            合计函数
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Common.SqlField.Alias">
            <summary>
            别名
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Common.DbAggrefunc">
            <summary>
            合计函数枚举
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbAggrefunc.NONE">
            <summary>
            无效值
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbAggrefunc.COUNT">
            <summary>
            求总记录数
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbAggrefunc.AVG">
            <summary>
            求平均值
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbAggrefunc.SUM">
            <summary>
            求总和
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbAggrefunc.MAX">
            <summary>
            求最大值
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbAggrefunc.MIN">
            <summary>
            求最小值
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Common.SqlHaving">
            <summary>
            T-SQL having
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Common.SqlWhere">
            <summary>
            T-SQL where
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlWhere.#ctor(System.String,System.Object)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlWhere.#ctor(System.String,ThinkNet.Database.Common.DbJudgeSymbol,System.Object)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Common.SqlWhere.Logical">
            <summary>
            连接类型
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Common.SqlWhere.Value">
            <summary>
            对应的值
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Common.SqlWhere.Name">
            <summary>
            字段名
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Common.SqlWhere.Symbol">
            <summary>
            查询等式
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlHaving.#ctor(ThinkNet.Database.Common.DbAggrefunc,System.String,System.Object)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlHaving.#ctor(ThinkNet.Database.Common.DbAggrefunc,System.String,ThinkNet.Database.Common.DbJudgeSymbol,System.Object)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlHaving.#ctor(ThinkNet.Database.Common.DbLogical,ThinkNet.Database.Common.DbAggrefunc,System.String,System.Object)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlHaving.#ctor(ThinkNet.Database.Common.DbLogical,ThinkNet.Database.Common.DbAggrefunc,System.String,ThinkNet.Database.Common.DbJudgeSymbol,System.Object)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Common.SqlHaving.Aggrefunc">
            <summary>
            合计函数
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Common.DbOrderType">
            <summary>
            排序类型
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbOrderType.DESC">
            <summary>
            降序
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbOrderType.ASC">
            <summary>
            升序
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Common.SqlOrder">
            <summary>
            用于排序的列
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlOrder.#ctor(System.String,ThinkNet.Database.Common.DbOrderType)">
            <summary>
            使用字段名称和排序方式创建新实例。
            </summary>
            <param name="name">字段名称</param>
            <param name="orderType">排序方式枚举</param>
        </member>
        <member name="P:ThinkNet.Database.Common.SqlOrder.OrderType">
            <summary>
            排序规则
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Common.SqlOrder.FieldName">
            <summary>
            获取列名称
            </summary>
        </member>
        <member name="T:ThinkNet.Database.DbContextExtensions">
            <summary>
            <see cref="T:ThinkNet.Database.IDbContext"/> 的扩展查询类
            </summary>
        </member>
        <member name="M:ThinkNet.Database.DbContextExtensions.Get``1(ThinkNet.Database.IDbContext,System.Object[])">
            <summary>
            获取实体信息
            </summary>
        </member>
        <member name="M:ThinkNet.Database.DbContextExtensions.GetOrCreateDatabase(ThinkNet.Database.IDbContext)">
            <summary>
            获取或创建数据程序
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Identifier.IIdentifierGenerator">
            <summary>
            表示生成标识id的接口
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Identifier.IIdentifierGenerator.GenerateNewId(ThinkNet.Database.Common.IDatabase,System.Object)">
            <summary>
            生成新的id
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Identifier.IIdentifierGenerator.Name">
            <summary>
            策略名称
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Identifier.IIdentifierGeneratorFactory">
            <summary>
            表示生成标识id的工厂
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Identifier.IIdentifierGeneratorFactory.Get(System.String)">
            <summary>
            获取系统的标识id生成器
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Identifier.IIdentifierGeneratorFactory.GetOrAdd(System.String,System.Func{ThinkNet.Database.Identifier.IIdentifierGenerator})">
            <summary>
            如果指定的键尚不存在，则将键/值对添加到字典中。
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.IAssemblyInitializer">
            <summary>
            程序集初始化接口
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.IAssemblyInitializer.Initialize(ThinkNet.Infrastructure.IObjectContainer,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            初始化
            </summary>
            <param name="container">IOC容器</param>
            <param name="types">扫描结果的程序集所有类型</param>
        </member>
        <member name="T:ThinkNet.Database.DbContextBase">
            <summary>
            实现 <see cref="T:ThinkNet.Database.IDbContext"/> 的抽象类
            </summary>
        </member>
        <member name="T:ThinkNet.Database.IDbContext">
            <summary>
            数据上下文
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.IUnitOfWork">
            <summary>
            表示继承该接口的类型是一个工作单元
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.IUnitOfWork.Commit">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IDbContext.Contains(System.Object)">
            <summary>
            判断此 <paramref name="entity"/> 是否存在于当前上下文中
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IDbContext.Detach(System.Object)">
            <summary>
            从当前上下文中分离此 <paramref name="entity"/>
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IDbContext.Insert(System.Object)">
            <summary>
            写入(提交时会触发sql-insert)
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IDbContext.Update(System.Object)">
            <summary>
            更新(提交时会触发sql-update)
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IDbContext.Save(System.Object)">
            <summary>
            保存。如何存在更新，不存在则新增
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IDbContext.Delete(System.Object)">
            <summary>
            删除(提交时会触发sql-delete)
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IDbContext.Get(System.Type,System.Object[])">
            <summary>
            获取实体信息
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IDbContext.Refresh(System.Object)">
            <summary>
            从数据中刷新(触发sql-select)
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IDbContext.CreateQuery``1">
            <summary>
            获取对数据类型已知的特定数据源的查询进行计算的功能。
            </summary>
        </member>
        <member name="P:ThinkNet.Database.IDbContext.TrackingObjects">
            <summary>
            获取跟踪的对象集合
            </summary>
        </member>
        <member name="P:ThinkNet.Database.IDbContext.DbConnection">
            <summary>
            获取当前的数据连接
            </summary>
        </member>
        <member name="E:ThinkNet.Database.IDbContext.DataCommitted">
            <summary>
            当数据提交后执行
            </summary>
        </member>
        <member name="M:ThinkNet.Database.DbContextBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.DbContextBase.#ctor(ThinkNet.Infrastructure.Context.IContextFactory)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.DbContextBase.DoCommit">
            <summary>
            预处理事务。
            </summary>
        </member>
        <member name="M:ThinkNet.Database.DbContextBase.Commit">
            <summary>
            提交事务。
            </summary>
        </member>
        <member name="M:ThinkNet.Database.DbContextBase.Insert(System.Object)">
            <summary>
            新增一个新对象到当前上下文
            </summary>
        </member>
        <member name="M:ThinkNet.Database.DbContextBase.Update(System.Object)">
            <summary>
            修改一个对象到当前上下文
            </summary>
        </member>
        <member name="M:ThinkNet.Database.DbContextBase.Save(System.Object)">
            <summary>
            保存。如何存在更新，不存在则新增
            </summary>
        </member>
        <member name="M:ThinkNet.Database.DbContextBase.Delete(System.Object)">
            <summary>
            删除一个对象到当前上下文
            </summary>
        </member>
        <member name="M:ThinkNet.Database.DbContextBase.Contains(System.Object)">
            <summary>
            当前工作单元是否包含此实体
            </summary>
        </member>
        <member name="M:ThinkNet.Database.DbContextBase.Detach(System.Object)">
            <summary>
            从当前工作分离此实体
            </summary>
        </member>
        <member name="M:ThinkNet.Database.DbContextBase.Refresh(System.Object)">
            <summary>
            从数据库刷新最新状态的实体
            </summary>
        </member>
        <member name="M:ThinkNet.Database.DbContextBase.Get(System.Type,System.Object[])">
            <summary>
            获取实体信息
            </summary>
        </member>
        <member name="M:ThinkNet.Database.DbContextBase.CreateQuery``1">
            <summary>
            获取对数据类型已知的特定数据源的查询进行计算的功能。
            </summary>
        </member>
        <member name="P:ThinkNet.Database.DbContextBase.DbConnection">
            <summary>
            当前的数据连接
            </summary>
        </member>
        <member name="P:ThinkNet.Database.DbContextBase.TrackingObjects">
            <summary>
            获取跟踪的对象集合
            </summary>
        </member>
        <member name="E:ThinkNet.Database.DbContextBase.DataCommitted">
            <summary>
            在数据提交成功后执行
            </summary>
        </member>
        <member name="M:ThinkNet.Database.DefaultDbContext.Dispose(System.Boolean)">
            <summary>
            释放数据连接。
            </summary>
        </member>
        <member name="T:ThinkNet.Database.IDbContextFactory">
            <summary>
            创建数据上下文的工厂
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IDbContextFactory.GetCurrentDbContext">
            <summary>
            当前上下文的数据操作
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IDbContextFactory.CreateDbContext">
            <summary>
            打开一个数据操作
            </summary>
        </member>
        <member name="T:ThinkNet.Database.DefaultRepositoryContextFactory">
            <summary>
            <see cref="T:ThinkNet.Database.IRepositoryContextFactory"/> 的系统默认实现
            </summary>
        </member>
        <member name="T:ThinkNet.Database.IRepositoryContextFactory">
            <summary>
            创建仓储上下文的工厂
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IRepositoryContextFactory.CreateRepositoryContext">
            <summary>
            创建一个仓储上下文
            </summary>
        </member>
        <member name="M:ThinkNet.Database.DefaultRepositoryContextFactory.#ctor(ThinkNet.Database.IDbContextFactory,ThinkNet.Messaging.IEventBus,ThinkNet.Infrastructure.IMemoryCache,ThinkNet.Infrastructure.Logging.ILoggerFactory)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.DefaultRepositoryContextFactory.CreateRepositoryContext">
            <summary>
            创建一个仓储上下文实例。
            </summary>
        </member>
        <member name="T:ThinkNet.Database.IRepositoryContext">
            <summary>
            仓储上下文
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IRepositoryContext.Commit(System.String)">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IRepositoryContext.GetRepository``1">
            <summary>
            获取仓储
            </summary>
        </member>
        <member name="T:ThinkNet.Database.DomainRepository">
            <summary>
            <see cref="T:ThinkNet.Database.IRepository"/> 的默认实现。
            </summary>
        </member>
        <member name="T:ThinkNet.Database.RepositoryBase">
            <summary>
            <see cref="T:ThinkNet.Database.IRepository"/> 的抽象实现。
            </summary>
        </member>
        <member name="T:ThinkNet.Database.IRepository">
            <summary>
            表示这是一个仓储接口
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IRepository.Get``1(System.Object)">
            <summary>
            获取聚合。如果不存在则抛异常
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IRepository.Find``1(System.Object)">
            <summary>
            查找聚合。如果不存在返回null，存在返回实例
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IRepository.Commit(System.Collections.Generic.IEnumerable{ThinkNet.Database.IAggregateRoot},System.Collections.Generic.IEnumerable{ThinkNet.Database.IAggregateRoot},System.Collections.Generic.IEnumerable{ThinkNet.Database.IAggregateRoot},System.String)">
            <summary>
            保存所有聚合。
            </summary>
        </member>
        <member name="M:ThinkNet.Database.RepositoryBase.#ctor(ThinkNet.Messaging.IEventBus,ThinkNet.Infrastructure.IMemoryCache,ThinkNet.Infrastructure.Logging.ILoggerFactory)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.RepositoryBase.GetFromStorage``1(System.Object)">
            <summary>
            从数据库中获取聚合。
            </summary>
        </member>
        <member name="M:ThinkNet.Database.RepositoryBase.Find``1(System.Object)">
            <summary>
            查找聚合。如果不存在返回null，存在返回实例
            </summary>
        </member>
        <member name="M:ThinkNet.Database.RepositoryBase.Get``1(System.Object)">
            <summary>
            根据标识id获得实体。
            </summary>
        </member>
        <member name="M:ThinkNet.Database.RepositoryBase.DoCommit(System.Collections.Generic.IEnumerable{ThinkNet.Database.IAggregateRoot},System.Collections.Generic.IEnumerable{ThinkNet.Database.IAggregateRoot},System.Collections.Generic.IEnumerable{ThinkNet.Database.IAggregateRoot})">
            <summary>
            提交所有聚合的实现。
            </summary>
        </member>
        <member name="M:ThinkNet.Database.RepositoryBase.Commit(System.Collections.Generic.IEnumerable{ThinkNet.Database.IAggregateRoot},System.Collections.Generic.IEnumerable{ThinkNet.Database.IAggregateRoot},System.Collections.Generic.IEnumerable{ThinkNet.Database.IAggregateRoot},System.String)">
            <summary>
            提交所有聚合。
            </summary>
        </member>
        <member name="M:ThinkNet.Database.DomainRepository.#ctor(ThinkNet.Messaging.IEventBus,ThinkNet.Infrastructure.IMemoryCache,ThinkNet.Database.IDbContextFactory,ThinkNet.Infrastructure.Logging.ILoggerFactory)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.DomainRepository.GetFromStorage``1(System.Object)">
            <summary>
            从数据库中获取聚合
            </summary>
        </member>
        <member name="M:ThinkNet.Database.DomainRepository.DoCommit(System.Collections.Generic.IEnumerable{ThinkNet.Database.IAggregateRoot},System.Collections.Generic.IEnumerable{ThinkNet.Database.IAggregateRoot},System.Collections.Generic.IEnumerable{ThinkNet.Database.IAggregateRoot})">
            <summary>
            提交所有聚合。
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Repository`1">
            <summary>
            仓储接口实现
            </summary>
            <typeparam name="TAggregateRoot">聚合类型</typeparam>
        </member>
        <member name="T:ThinkNet.Database.IRepository`1">
            <summary>
            表示继承该接口的是一个仓储。
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IRepository`1.Add(`0)">
            <summary>
            添加聚合到仓储
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IRepository`1.Update(`0)">
            <summary>
            更新聚合到仓储
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IRepository`1.Remove(`0)">
            <summary>
            从仓储中移除聚合
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IRepository`1.Get``1(``0)">
            <summary>
            根据标识id获得聚合实例
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IRepository`1.Find``1(``0)">
            <summary>
            查找聚合。如果不存在返回null，存在返回实例
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Repository`1.#ctor(ThinkNet.Database.IDbContext)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Repository`1.#ctor(ThinkNet.Database.IDbContext,ThinkNet.Infrastructure.IMemoryCache,ThinkNet.Infrastructure.Logging.ILogger)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Repository`1.Add(`0)">
            <summary>
            添加聚合根到仓储
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Repository`1.Update(`0)">
            <summary>
            更新聚合到仓储
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Repository`1.Remove(`0)">
            <summary>
            从仓储中移除聚合
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Repository`1.Get``1(``0)">
            <summary>
            根据标识id获得实体
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Repository`1.Find``1(``0)">
            <summary>
            根据标识id获取聚合实例，如未找到则返回null
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Repository`1.DbContext">
            <summary>
            数据上下文
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Repository`1.Cache">
            <summary>
            缓存程序
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Repository`1.Logger">
            <summary>
            日志程序
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Common.SqlServerDatabase">
            <summary>
            MS-SQL
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlServerDatabase.#ctor(System.String)">
            <summary>
            通过有效的数据连接字符串构造实例
            </summary>
            <param name="nameOrConnectionString">数据连接</param>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlServerDatabase.DeriveParameters(System.Data.Common.DbCommand)">
            <summary>
            从在 <see cref="T:System.Data.SqlClient.SqlCommand"/> 中指定的存储过程中检索参数信息并填充指定的 <see cref="T:System.Data.SqlClient.SqlCommand"/> 对象的参数集合
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlServerDatabase.BuildParameterName(System.String)">
            <summary>
            创建命令参数名称
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlServerDatabase.GetIdentitySql">
            <summary>
            获取自动增量的Sql
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlServerDatabase.GetTableColumns(System.String)">
            <summary>
            获取数据库表的字段信息
            </summary>
            <param name="tableName">表名称</param>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlServerDatabase.CreateCommand">
            <summary>
            创建数据库命令
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlServerDatabase.CreateConnection">
            <summary>
            创建数据库连接
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlServerDatabase.CreateParameter">
            <summary>
            创建数据库命令参数
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlServerDatabase.ExecuteDataset(System.Data.CommandType,System.String,System.Data.IDbDataParameter[])">
            <summary>
            执行命令并返回DataSet
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlServerDatabase.BuildLikeParameterName(System.String)">
            <summary>
            创建模糊查询参数名称
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Common.SqlServerDatabase.PagingSupport(System.Int32,System.Int32)">
            <summary>
            分页T-SQL(最低要求SQL2005)
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Common.DbLogical">
            <summary>
            查询条件连接类型
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbLogical.And">
            <summary>
            And
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbLogical.Or">
            <summary>
            Or
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Common.DbJudgeSymbol">
            <summary>
            查询等式枚举
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbJudgeSymbol.EQ">
            <summary>
            等于(=)
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbJudgeSymbol.GT">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbJudgeSymbol.EGT">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbJudgeSymbol.LT">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbJudgeSymbol.ELT">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbJudgeSymbol.NEQ">
            <summary>
            不等于(!=)
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbJudgeSymbol.IN">
            <summary>
            子查询
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbJudgeSymbol.NIN">
            <summary>
            NOT IN
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbJudgeSymbol.LIKE">
            <summary>
            LIKE
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbJudgeSymbol.NLIKE">
            <summary>
            NOT LIKE
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbJudgeSymbol.IS">
            <summary>
            IS
            </summary>
        </member>
        <member name="F:ThinkNet.Database.Common.DbJudgeSymbol.ISNOT">
            <summary>
            IS NOT
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Common.TableColumn">
            <summary>
            表示数据表中列的架构
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Common.TableColumn.Name">
            <summary>
            获取或设置字段名称
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Common.TableColumn.DataType">
            <summary>
            获取或设置字段的数据类型。
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Common.TableColumn.AllowDBNull">
            <summary>
            获取或设置一个值，指示字段是否允许空值。
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Common.TableColumn.AutoIncrement">
            <summary>
            获取或设置一个值，指示字段是否为自动增量
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Common.TableColumn.Primary">
            <summary>
            获取或设置一个值，指示字段是否为主键
            </summary>
        </member>
        <member name="T:ThinkNet.Database.ValueObject`1">
            <summary>
            表示继承该抽象类的类型是一个值对象
            </summary>
        </member>
        <member name="M:ThinkNet.Database.ValueObject`1.System#IEquatable{T}#Equals(`0)">
            <summary>
            指示当前对象是否等于同一类型的另一个对象。
            </summary>
        </member>
        <member name="M:ThinkNet.Database.ValueObject`1.Equals(System.Object)">
            <summary>
            指示当前对象是否等于同一类型的另一个对象。
            </summary>
        </member>
        <member name="M:ThinkNet.Database.ValueObject`1.GetHashCode">
            <summary>
            哈希函数
            </summary>
        </member>
        <member name="M:ThinkNet.Database.ValueObject`1.op_Equality(ThinkNet.Database.ValueObject{`0},ThinkNet.Database.ValueObject{`0})">
            <summary>
            判断是否相等
            </summary>
        </member>
        <member name="M:ThinkNet.Database.ValueObject`1.op_Inequality(ThinkNet.Database.ValueObject{`0},ThinkNet.Database.ValueObject{`0})">
            <summary>
            判断是否不相等
            </summary>
        </member>
        <member name="T:ThinkNet.EventSourcing.EventData">
            <summary>
            历史事件(用于还原溯源聚合的事件)
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.EventData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.EventData.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.EventData.GetHashCode">
            <summary>
            返回此实例的哈希代码
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.EventData.Equals(System.Object)">
            <summary>
            确定此实例是否与指定的对象（也必须是 <see cref="T:ThinkNet.EventSourcing.EventData"/> 对象）相同。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.EventData.ToString">
            <summary>
            将此实例的标识转换为其等效的字符串表示形式。
            </summary>
        </member>
        <member name="P:ThinkNet.EventSourcing.EventData.AggregateId">
            <summary>
            聚合根标识。
            </summary>
        </member>
        <member name="P:ThinkNet.EventSourcing.EventData.AggregateTypeCode">
            <summary>
            聚合根类型编码。
            </summary>
        </member>
        <member name="P:ThinkNet.EventSourcing.EventData.Version">
            <summary>
            版本号。
            </summary>
        </member>
        <member name="P:ThinkNet.EventSourcing.EventData.Payload">
            <summary>
            事件流
            </summary>
        </member>
        <member name="P:ThinkNet.EventSourcing.EventData.CorrelationId">
            <summary>
            发布事件的相关id
            </summary>
        </member>
        <member name="P:ThinkNet.EventSourcing.EventData.Timestamp">
            <summary>
            生成事件的时间戳
            </summary>
        </member>
        <member name="T:ThinkNet.EventSourcing.EventSourced`1">
            <summary>
            实现 <see cref="T:ThinkNet.EventSourcing.IEventSourced"/> 的抽象类
            </summary>
        </member>
        <member name="T:ThinkNet.EventSourcing.IEventSourced">
            <summary>
            表示继承该接口的类型是一个由事件溯源的聚合根
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.IEventSourced.GetEvents">
            <summary>
            获取事件集合。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.IEventSourced.LoadFrom(System.Collections.Generic.IEnumerable{ThinkNet.Messaging.IVersionedEvent})">
            <summary>
            通过事件还原聚合状态。
            </summary>
        </member>
        <member name="P:ThinkNet.EventSourcing.IEventSourced.Version">
            <summary>
            聚合版本号。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.EventSourced`1.#ctor(`0)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.EventSourced`1.RaiseEvent``1(``0)">
            <summary>
            收集事件。
            </summary>
        </member>
        <member name="P:ThinkNet.EventSourcing.EventSourced`1.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="T:ThinkNet.EventSourcing.EventSourcedException">
            <summary>Represents an event-sourced exception.
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.EventSourcedException.#ctor(System.Type,System.Object)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.EventSourcedException.#ctor(System.String,System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.EventSourcedException.#ctor(System.Int32,System.Int32)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.EventSourcedException.#ctor(System.Type,System.Type)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="T:ThinkNet.EventSourcing.EventTableNameAttribute">
            <summary>
            指定存储事件源的表名称的特性
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.EventTableNameAttribute.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.EventTableNameAttribute.#ctor(System.String)">
            <summary>
            Parameterized Constructor.
            </summary>
        </member>
        <member name="P:ThinkNet.EventSourcing.EventTableNameAttribute.TableName">
            <summary>
            存储事件的表名称
            </summary>
        </member>
        <member name="P:ThinkNet.EventSourcing.EventTableNameAttribute.PerAggregate">
            <summary>
            是否为每个聚合根的名称
            </summary>
        </member>
        <member name="T:ThinkNet.EventSourcing.IEventSourcedRepository">
            <summary>
            表示继承此接口的是可溯源聚合根的仓储
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.IEventSourcedRepository.Get``1(System.Object)">
            <summary>
            获取聚合。如果不存在则抛异常
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.IEventSourcedRepository.Find``1(System.Object)">
            <summary>
            查找聚合。如果不存在返回null，存在返回实例
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.IEventSourcedRepository.Save(ThinkNet.EventSourcing.IEventSourced,System.String)">
            <summary>
            保存聚合根事件。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.IEventSourcedRepository.Remove(ThinkNet.EventSourcing.IEventSourced)">
            <summary>
            移除聚合根事件。
            </summary>
        </member>
        <member name="T:ThinkNet.EventSourcing.IEventStore">
            <summary>
            事件存储。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.IEventStore.Append(System.Collections.Generic.IEnumerable{ThinkNet.EventSourcing.EventData})">
            <summary>
            添加溯源事件。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.IEventStore.IsExist(System.String)">
            <summary>
            判断该命令下是否存在相关事件。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.IEventStore.FindAll(System.String)">
            <summary>
            查询该命令下的溯源事件。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.IEventStore.FindAll(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            查询聚合的溯源事件。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.IEventStore.RemoveAll(System.String,System.Int32)">
            <summary>
            移除该聚合的溯源事件。
            </summary>
        </member>
        <member name="T:ThinkNet.EventSourcing.IEventTableNameProvider">
            <summary>
            提供存储事件表的名称的提供程序
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.IEventTableNameProvider.GetTableName(System.Type)">
            <summary>
            获取给定的聚合根类型的表名称
            </summary>
        </member>
        <member name="T:ThinkNet.EventSourcing.DefaultEventStore">
            <summary>
            <see cref="T:ThinkNet.EventSourcing.IEventStore"/> 的默认实现。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.DefaultEventStore.#ctor(ThinkNet.Database.IDbContextFactory)">
            <summary>
            Parameterized Constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.DefaultEventStore.Append(System.Collections.Generic.IEnumerable{ThinkNet.EventSourcing.EventData})">
            <summary>
            添加溯原事件
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.DefaultEventStore.IsExist(System.String)">
            <summary>
            判断该命令下是否存在相关事件。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.DefaultEventStore.FindAll(System.String)">
            <summary>
            查询该命令下的溯源事件。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.DefaultEventStore.FindAll(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            查询聚合的溯源事件。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.DefaultEventStore.RemoveAll(System.String,System.Int32)">
            <summary>
            移除该聚合的溯源事件。
            </summary>
        </member>
        <member name="T:ThinkNet.EventSourcing.DefaultEventTableNameProvider">
            <summary>
            <see cref="T:ThinkNet.EventSourcing.IEventTableNameProvider"/> 的默认实现。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.DefaultEventTableNameProvider.GetTableName(System.Type)">
            <summary>
            获取给定的聚合根类型的表名称
            </summary>
        </member>
        <member name="T:ThinkNet.EventSourcing.DefaultSnapshotStore">
            <summary>
            快照存储
            </summary>
        </member>
        <member name="T:ThinkNet.EventSourcing.EmptySnapshotStore">
            <summary>Represents a snapshot store that always not store any snapshot.
            </summary>
        </member>
        <member name="T:ThinkNet.EventSourcing.ISnapshotStore">
            <summary>
            存储快照
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.ISnapshotStore.Save(ThinkNet.EventSourcing.Snapshot)">
            <summary>
            存储给定的快照。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.ISnapshotStore.Remove(System.String,System.Int32)">
            <summary>
            从存储中删除快照。
            </summary>
            <param name="aggregateId">The aggregate root id.</param>
            <param name="aggregateTypeCode">The aggregate root typeCode.</param>
        </member>
        <member name="M:ThinkNet.EventSourcing.ISnapshotStore.GetLastestSnapshot(System.String,System.Int32)">
            <summary>
            获取指定聚合根的最新快照。
            </summary>
            <param name="aggregateId">The aggregate root id.</param>
            <param name="aggregateTypeCode">The aggregate root type.</param>
            <returns>Returns the snapshot if exist; otherwise, returns null.</returns>
        </member>
        <member name="M:ThinkNet.EventSourcing.EmptySnapshotStore.#ctor(ThinkNet.Infrastructure.ITypeCodeProvider)">
            <summary>
            Parameterized Constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.EmptySnapshotStore.GetTriggeredVersion(System.Int32)">
            <summary>
            获取触发保存快照的间隔版本号。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.EmptySnapshotStore.Save(ThinkNet.EventSourcing.Snapshot)">
            <summary>
            Do nothing.
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.EmptySnapshotStore.Remove(System.String,System.Int32)">
            <summary>
            Do nothing.
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.EmptySnapshotStore.GetLastestSnapshot(System.String,System.Int32)">
            <summary>
            Always return null.
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.DefaultSnapshotStore.#ctor(ThinkNet.Database.IDbContextFactory,ThinkNet.Infrastructure.ITypeCodeProvider)">
            <summary>
            Parameterized Constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.DefaultSnapshotStore.Save(ThinkNet.EventSourcing.Snapshot)">
            <summary>
            保存快照
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.DefaultSnapshotStore.Remove(System.String,System.Int32)">
            <summary>
            删除聚合快照。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.DefaultSnapshotStore.GetLastestSnapshot(System.String,System.Int32)">
            <summary>
            获取该聚合的最新快照数据。
            </summary>
        </member>
        <member name="T:ThinkNet.EventSourcing.DefaultSnapshotTableNameProvider">
            <summary>
            <see cref="T:ThinkNet.EventSourcing.ISnapshotTableNameProvider"/> 的默认实现。
            </summary>
        </member>
        <member name="T:ThinkNet.EventSourcing.ISnapshotTableNameProvider">
            <summary>
            存储快照对应的表名称
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.ISnapshotTableNameProvider.GetTableName(System.Type)">
            <summary>
            获取存储该聚合根类型的快照表名称
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.DefaultSnapshotTableNameProvider.GetTableName(System.Type)">
            <summary>
            获取该聚合类型的相应的快照表名称。
            </summary>
        </member>
        <member name="T:ThinkNet.EventSourcing.DefaultEventSourcedRepository">
            <summary>
            <see cref="T:ThinkNet.EventSourcing.IEventSourcedRepository"/> 的默认实现类
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.DefaultEventSourcedRepository.#ctor(ThinkNet.EventSourcing.IEventStore,ThinkNet.EventSourcing.ISnapshotStore,ThinkNet.Infrastructure.IMemoryCache,ThinkNet.Infrastructure.Serialization.ITextSerializer,ThinkNet.Infrastructure.ITypeCodeProvider,ThinkNet.Messaging.IEventBus,ThinkNet.Infrastructure.Logging.ILoggerFactory)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.DefaultEventSourcedRepository.Get``1(System.Object)">
            <summary>
            根据主键获取聚合根实例。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.DefaultEventSourcedRepository.Find``1(System.Object)">
            <summary>
            根据主键获取聚合根实例。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.DefaultEventSourcedRepository.Save(ThinkNet.EventSourcing.IEventSourced,System.String)">
            <summary>
            保存聚合事件。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.DefaultEventSourcedRepository.Remove(ThinkNet.EventSourcing.IEventSourced)">
            <summary>
            删除聚合相关的事件。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.DefaultEventSourcedRepository.Remove(System.Type,System.Object)">
            <summary>
            删除聚合相关的事件。
            </summary>
        </member>
        <member name="T:ThinkNet.EventSourcing.Snapshot">
            <summary>
            聚合快照
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.Snapshot.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.Snapshot.#ctor(System.Int32,System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.Snapshot.GetHashCode">
            <summary>
            返回此实例的哈希代码
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.Snapshot.Equals(System.Object)">
            <summary>
            确定此实例是否与指定的对象（也必须是 <see cref="T:ThinkNet.EventSourcing.Snapshot"/> 对象）相同。
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.Snapshot.ToString">
            <summary>
            将此实例的标识转换为其等效的字符串表示形式。
            </summary>
        </member>
        <member name="P:ThinkNet.EventSourcing.Snapshot.AggregateId">
            <summary>
            聚合根标识
            </summary>
        </member>
        <member name="P:ThinkNet.EventSourcing.Snapshot.AggregateTypeCode">
            <summary>
            聚合根类型名称
            </summary>
        </member>
        <member name="P:ThinkNet.EventSourcing.Snapshot.Version">
            <summary>
            创建该聚合快照的聚合根版本号
            </summary>
        </member>
        <member name="P:ThinkNet.EventSourcing.Snapshot.Data">
            <summary>
            聚合根数据
            </summary>
        </member>
        <member name="P:ThinkNet.EventSourcing.Snapshot.Timestamp">
            <summary>
            创建该快照的时间
            </summary>
        </member>
        <member name="T:ThinkNet.EventSourcing.SnapshotPolicyAttribute">
            <summary>
            指定聚合根快照存储策略的特性
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.SnapshotPolicyAttribute.#ctor(System.Int32)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkNet.EventSourcing.SnapshotPolicyAttribute.TriggeredVersion">
            <summary>
            触发保存快照的间隔版本号
            </summary>
        </member>
        <member name="T:ThinkNet.EventSourcing.SnapshotTableNameAttribute">
            <summary>
            指定聚合根快照表名称的特性
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.SnapshotTableNameAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.EventSourcing.SnapshotTableNameAttribute.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkNet.EventSourcing.SnapshotTableNameAttribute.TableName">
            <summary>
            存储快照的表名称
            </summary>
        </member>
        <member name="P:ThinkNet.EventSourcing.SnapshotTableNameAttribute.PerAggregate">
            <summary>
            是否为每个聚合根的名称
            </summary>
        </member>
        <member name="T:System.Collections.Generic.DictionaryExtentions">
            <summary>
            对 <see cref="T:System.Collections.Generic.Dictionary`2"/> 的扩展
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtentions.GetOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            如果指定的键尚不存在，则将键/值对添加到字典中。
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtentions.TryAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1)">
            <summary>
            尝试将指定的键和值添加到字典中。
            </summary>
        </member>
        <member name="T:System.Linq.Expressions.ExpressionFuncExtender">
            <summary>
            Represents the extender for Expression[Func[T, bool]] type.
            This is part of the solution which solves
            the expression parameter problem when going to Entity Framework by using
            Apworks specifications. For more information about this solution please
            refer to http://blogs.msdn.com/b/meek/archive/2008/05/02/linq-to-entities-combining-predicates.aspx.
            </summary>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionFuncExtender.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines two given expressions by using the AND semantics.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="first">The first part of the expression.</param>
            <param name="second">The second part of the expression.</param>
            <returns>The combined expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionFuncExtender.AndAlso``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines two given expressions by using the AND semantics.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="first">The first part of the expression.</param>
            <param name="second">The second part of the expression.</param>
            <returns>The combined expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionFuncExtender.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Combines two given expressions by using the OR semantics.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="first">The first part of the expression.</param>
            <param name="second">The second part of the expression.</param>
            <returns>The combined expression.</returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionFuncExtender.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Represents the specification which indicates the semantics opposite to the given specification.
            </summary>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionFuncExtender.RemoveConvert(System.Linq.Expressions.Expression)">
            <summary></summary>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionFuncExtender.Parameter(System.Linq.Expressions.MemberExpression)">
            <summary></summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Context.CurrentContext">
            <summary>
            <see cref="T:ThinkNet.Infrastructure.Context.ICurrentContext"/> 的抽象实现。
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Context.ICurrentContext">
            <summary>
            当前访问的上下文接口
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Context.ICurrentContext.CurrentContext">
            <summary>
            获取当前的上下文
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Context.CurrentContext.#ctor(ThinkNet.Infrastructure.Context.IContextFactory)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Context.CurrentContext.GetMap">
            <summary>
            Get the dicitonary mapping database factory to its current dbcontext.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Context.CurrentContext.SetMap(System.Collections.IDictionary)">
            <summary>
            Set the map mapping database factory to its current dbcontext.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Context.CurrentContext.Bind(ThinkNet.Infrastructure.Context.IContext)">
            <summary>
            Binds the specified dbcontext to the current context.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Context.CurrentContext.HasBind(ThinkNet.Infrastructure.Context.IContextFactory)">
            <summary>
            Returns whether there is a dbcontext bound to the current context.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Context.CurrentContext.Unbind(ThinkNet.Infrastructure.Context.IContextFactory)">
            <summary>
            Unbinds and returns the current dbcontext.
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Context.CurrentContext.ContextFactory">
            <summary>
            context factory
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Context.CurrentContext.Context">
            <summary>
            Gets or sets the currently bound context.
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Criteria`1">
            <summary>
            查询表达式
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.ICriteria`1">
            <summary>
            查询接口
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.ICriteria`1.Filtered(System.Linq.IQueryable{`0})">
            <summary>
            数据过滤
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.ICriteria`1.Expression">
            <summary>
            获取lambda表达式
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Criteria`1.Eval(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            表达式运算
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Criteria`1.Empty">
            <summary>
            空的查询表达式
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Criteria`1.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            And
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Criteria`1.AndAlso(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            And
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Criteria`1.AndNot(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            否定And
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Criteria`1.Or(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Or
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Criteria`1.Not">
            <summary>
            否定查询
            </summary>
            <returns></returns>
        </member>
        <member name="T:ThinkNet.Database.Mapping.ClassAttribute">
            <summary>
            标记该特性的是一个数据映射类。
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Mapping.ClassAttribute.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Mapping.ClassAttribute.Table">
            <summary>
            表名
            </summary>
        </member>
        <member name="T:System.Data.DbConnectionExtentions">
            <summary>
            <see cref="T:System.Data.IDbConnection"/> 的扩展类
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteNonQuery(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行当前数据库连接对象的命令,指定参数.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteNonQuery(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})">
            <summary>
            执行当前数据库连接对象的命令,指定参数.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行当前数据库连接对象的命令,指定参数.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})">
            <summary>
            执行当前数据库连接对象的命令,指定参数.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行当前数据库连接对象的数据阅读器,指定参数.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})">
            <summary>
            执行当前数据库连接对象的数据阅读器,指定参数.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteReader(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行当前数据库连接对象的数据阅读器,指定参数.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteReader(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})">
            <summary>
            执行当前数据库连接对象的数据阅读器,指定参数.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteScalar(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteScalar(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteScalar(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
        </member>
        <member name="M:System.Data.DbConnectionExtentions.ExecuteScalar(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.IDataParameter})">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.DefaultTypeCodeProvider">
            <summary>
            <see cref="T:ThinkNet.Infrastructure.ITypeCodeProvider"/> 的默认实现。
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.AbstractTypeCodeProvider">
            <summary>
            实现 <see cref="T:ThinkNet.Infrastructure.ITypeCodeProvider"/> 的抽象类
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.ITypeCodeProvider">
            <summary>Represents a provider to provide the type and code mapping information.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.ITypeCodeProvider.GetTypeCode(System.Type)">
            <summary>Get the code of the given type.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.ITypeCodeProvider.GetType(System.Int32)">
            <summary>Get the type of the given type code.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.AbstractTypeCodeProvider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.AbstractTypeCodeProvider.GetTypeCode(System.Type)">
            <summary>
            Get the code of the given type.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.AbstractTypeCodeProvider.GetType(System.Int32)">
            <summary>
            Get the type of the given type code.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.AbstractTypeCodeProvider.RegisterType``1(System.Int32)">
            <summary>
            注册类型和编码之间的映射
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.AbstractTypeCodeProvider.RegisterType(System.Int32,System.Type)">
            <summary>
            注册类型和编码之间的映射
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.AbstractTypeCodeProvider.MatchedType(System.Type)">
            <summary>
            匹配的类型
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.DefaultTypeCodeProvider.MatchedType(System.Type)">
            <summary>
            匹配的类型。
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.EmptyCache">
            <summary>
            表示这是一个空的缓存实现。
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.IMemoryCache">
            <summary>
            设置或获取聚合的缓存接口
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.IMemoryCache.Get(System.Type,System.Object)">
            <summary>
            从缓存获取聚合实例
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.IMemoryCache.Set(System.Object,System.Object)">
            <summary>
            设置一个聚合实例入缓存。不存在加入缓存，存在更新缓存
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.IMemoryCache.Remove(System.Type,System.Object)">
            <summary>
            从缓存中移除聚合根
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.EmptyCache.Instance">
            <summary>
            <see cref="T:ThinkNet.Infrastructure.EmptyCache"/> 的实例
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.EmptyCache.Get(System.Type,System.Object)">
            <summary>
            获取实例(始终为null)
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.EmptyCache.Set(System.Object,System.Object)">
            <summary>
            无任何动作。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.EmptyCache.Remove(System.Type,System.Object)">
            <summary>
            无任何动作。
            </summary>
        </member>
        <member name="T:ThinkNet.Database.ILifecycle">
            <summary>
            对象生命周期调用
            </summary>
        </member>
        <member name="M:ThinkNet.Database.ILifecycle.OnInserting(ThinkNet.Database.IDbContext)">
            <summary>
            Insert前回调
            </summary>
        </member>
        <member name="M:ThinkNet.Database.ILifecycle.OnUpdating(ThinkNet.Database.IDbContext)">
            <summary>
            Update前回调
            </summary>
        </member>
        <member name="M:ThinkNet.Database.ILifecycle.OnDeleting(ThinkNet.Database.IDbContext)">
            <summary>
            Delete前回调
            </summary>
        </member>
        <member name="M:ThinkNet.Database.ILifecycle.OnLoaded(ThinkNet.Database.IDbContext)">
            <summary>
            Load后回调
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.IOrder`1">
            <summary>
            排序表达式接口
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.IOrder`1.Arranged(System.Linq.IQueryable{`0})">
            <summary>
            排列计算
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.IOrder`1.OrderItems">
            <summary>
            排序
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.IOrderItem`1">
            <summary>
            排序元素接口
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.IOrderItem`1.Expression">
            <summary>
            获取排序lambda表达式
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.IOrderItem`1.SortOrder">
            <summary>
            获取排序方式
            </summary>
        </member>
        <member name="T:ThinkNet.Database.IValidatable">
            <summary>
            实体验证接口
            </summary>
        </member>
        <member name="M:ThinkNet.Database.IValidatable.Validate(ThinkNet.Database.IDbContext)">
            <summary>
            持久化之前验证
            </summary>
        </member>
        <member name="T:ThinkNet.Database.LifecycleVeto">
            <summary>
            生命周期状态
            </summary>
        </member>
        <member name="F:ThinkNet.Database.LifecycleVeto.Accept">
            <summary>
            接受
            </summary>
        </member>
        <member name="F:ThinkNet.Database.LifecycleVeto.Veto">
            <summary>
            否决
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Mapping.PropertyAttribute">
            <summary>
            标记该特性的是一个数据字段
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Mapping.PropertyAttribute.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Mapping.PropertyAttribute.Column">
            <summary>
            字段名称
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Mapping.PropertyAttribute.Serializable">
            <summary>
            是否序列化
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Mapping.PropertyAttribute.Insert">
            <summary>
            为true时表示该字段只在新增数据的时候写入
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Mapping.PropertyAttribute.Update">
            <summary>
            为true时表示该字段只在更新数据的时候写入
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Mapping.PropertyAttribute.NotNull">
            <summary>
            表示该值不能为null
            </summary>
        </member>
        <member name="T:ThinkNet.Database.Mapping.IdAttribute">
            <summary>
            标记该特性的是一个主键。
            </summary>
        </member>
        <member name="M:ThinkNet.Database.Mapping.IdAttribute.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkNet.Database.Mapping.IdAttribute.Generator">
            <summary>
            主键生成策略
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Serialization.IBinarySerializer">
            <summary>
            表示一个序列化器。用来序列化对象的字节数组
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Serialization.IBinarySerializer.Serialize(System.Object)">
            <summary>
            序列化一个对象到字节数组。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Serialization.IBinarySerializer.Deserialize(System.Byte[])">
            <summary>
            反序列化一个对象从一个字节数组。
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory">
            <summary>
            <see cref="T:ThinkNet.Infrastructure.Logging.ILoggerFactory"/> 的默认实现
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Logging.ILoggerFactory">
            <summary>
            表示继承此接口的是一个日志工厂
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILoggerFactory.GetOrCreate(System.String)">
            <summary>
            通过名称获取或创建一个日志
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILoggerFactory.GetOrCreate(System.Type)">
            <summary>
            通过类型获取或创建一个日志
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Instance">
            <summary>
            <see cref="T:ThinkNet.Infrastructure.Logging.ILoggerFactory"/> 的一个实例
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.GetOrCreate(System.String)">
            <summary>
            获取写日志接口。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.GetOrCreate(System.Type)">
            <summary>
            获取写日志接口。
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Logging.ILogger">
            <summary>
            写日志信息接口
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Debug(System.String)">
            <summary>
            写一个调试日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Debug(System.String,System.Object[])">
            <summary>
            写一个调试日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Debug(System.Exception)">
            <summary>
            写一个调试日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Debug(System.Exception,System.String)">
            <summary>
            写一个调试日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            写一个调试日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Info(System.String)">
            <summary>
            写一个信息日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Info(System.String,System.Object[])">
            <summary>
            写一个信息日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Info(System.Exception)">
            <summary>
            写一个信息日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Info(System.Exception,System.String)">
            <summary>
            写一个信息日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            写一个信息日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Error(System.String)">
            <summary>
            写一个错误日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Error(System.String,System.Object[])">
            <summary>
            写一个错误日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Error(System.Exception)">
            <summary>
            写一个错误日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Error(System.Exception,System.String)">
            <summary>
            写一个错误日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            写一个错误日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Warn(System.String)">
            <summary>
            写一个警告日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Warn(System.String,System.Object[])">
            <summary>
            写一个警告日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Warn(System.Exception)">
            <summary>
            写一个警告日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Warn(System.Exception,System.String)">
            <summary>
            写一个警告日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            写一个警告日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Fatal(System.String)">
            <summary>
            写一个致命的日志消息。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Fatal(System.String,System.Object[])">
            <summary>
            写一个致命的日志消息。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Fatal(System.Exception)">
            <summary>
            写一个致命的日志消息。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Fatal(System.Exception,System.String)">
            <summary>
            写一个致命的日志消息。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.ILogger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            写一个致命的日志消息。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Debug(System.String)">
            <summary>
            写一个调试日志。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Debug(System.String,System.Object[])">
            <summary>
            写一个调试日志。
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Debug(System.Exception)">
            <summary>
            写一个调试日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Debug(System.Exception,System.String)">
            <summary>
            写一个调试日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            写一个调试日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Info(System.String)">
            <summary>
            写一个信息日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Info(System.String,System.Object[])">
            <summary>
            写一个信息日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Info(System.Exception)">
            <summary>
            写一个信息日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Info(System.Exception,System.String)">
            <summary>
            写一个信息日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            写一个信息日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Warn(System.String)">
            <summary>
            写一个警告日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Warn(System.String,System.Object[])">
            <summary>
            写一个警告日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Warn(System.Exception)">
            <summary>
            写一个警告日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Warn(System.Exception,System.String)">
            <summary>
            写一个警告日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            写一个警告日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Error(System.String)">
            <summary>
            写一个错误日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Error(System.String,System.Object[])">
            <summary>
            写一个错误日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Error(System.Exception)">
            <summary>
            写一个错误日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Error(System.Exception,System.String)">
            <summary>
            写一个错误日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            写一个错误日志。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Fatal(System.String)">
            <summary>
            写一个致命的日志消息。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Fatal(System.String,System.Object[])">
            <summary>
            写一个致命的日志消息。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Fatal(System.Exception)">
            <summary>
            写一个致命的日志消息。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Fatal(System.Exception,System.String)">
            <summary>
            写一个致命的日志消息。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Logging.DefaultLoggerFactory.Logger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            写一个致命的日志消息。
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.MemoryCache">
            <summary>
            通过ThinkLib.Cache的配置实现的缓存。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.MemoryCache.#ctor(ThinkNet.Infrastructure.Serialization.IBinarySerializer)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.MemoryCache.Get(System.Type,System.Object)">
            <summary>
            从缓存中获取该类型的实例。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.MemoryCache.Set(System.Object,System.Object)">
            <summary>
            设置实例到缓存
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.MemoryCache.Remove(System.Type,System.Object)">
            <summary>
            从缓存中移除
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Order`1">
            <summary>
            排序表达式实现
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.Order`1.Empty">
            <summary>
            空的排序
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Order`1.OrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            升序
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Order`1.OrderByDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            降序
            </summary>
            <param name="expression">排序列</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Order`1.ThenBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            升序
            </summary>
            <param name="expression"></param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Order`1.ThenByDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            降序
            </summary>
            <param name="expression">排序列</param>
        </member>
        <member name="T:System.Reflection.CustomAttributeProviderExtentions">
            <summary>
            <see cref="T:System.Reflection.ICustomAttributeProvider"/>扩展方法
            </summary>
        </member>
        <member name="M:System.Reflection.CustomAttributeProviderExtentions.GetAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            返回<paramref name="provider"/>上定义的<typeparamref name="TAttribute"/>特性数组。
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="provider">为支持自定义属性的反映对象提供自定义属性。</param>
            <param name="inherit">当为 true 时，查找继承的自定义属性的层次结构链。</param>
        </member>
        <member name="M:System.Reflection.CustomAttributeProviderExtentions.GetAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            返回<paramref name="provider"/>上定义的第一个<typeparamref name="TAttribute"/>特性。
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="provider">为支持自定义属性的反映对象提供自定义属性。</param>
            <param name="inherit">当为 true 时，查找继承的自定义属性的层次结构链。</param>
        </member>
        <member name="M:System.Reflection.CustomAttributeProviderExtentions.IsDefined``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            判断<paramref name="provider"/>上是否定义<typeparamref name="TAttribute"/>特性
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="provider">为支持自定义属性的反映对象提供自定义属性。</param>
            <param name="inherit">当为 true 时，查找继承的自定义属性的层次结构链。</param>
        </member>
        <member name="T:System.Data.DataReaderExtentions">
            <summary>
            对 <see cref="T:System.Data.IDataReader"/> 的扩展
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToDictionary(System.Data.IDataReader)">
            <summary>
            转成字典数据
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToDictionary(System.Data.IDataReader,System.Boolean)">
            <summary>
            转成字典数据
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToList(System.Data.IDataReader)">
            <summary>
            转成字典数据集合
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToList(System.Data.IDataReader,System.Boolean)">
            <summary>
            转成字典数据集合
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToList``1(System.Data.IDataReader)">
            <summary>
            转成实体集合
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToList``1(System.Data.IDataReader,System.Collections.IDictionary)">
            <summary>
            转成实体集合
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToList``1(System.Data.IDataReader,System.Boolean)">
            <summary>
            转成实体集合
            </summary>
        </member>
        <member name="M:System.Data.DataReaderExtentions.ToList``1(System.Data.IDataReader,System.Boolean,System.Collections.IDictionary)">
            <summary>
            转成实体集合
            </summary>
        </member>
        <member name="T:System.Linq.QueryableExtensions">
            <summary>
            <see cref="T:System.Linq.IQueryable"/> 的扩展查询类
            </summary>
        </member>
        <member name="M:System.Linq.QueryableExtensions.Count``1(System.Linq.IQueryable{``0},ThinkNet.Infrastructure.ICriteria{``0})">
            <summary>
            获取符合条件的记录总数
            </summary>
        </member>
        <member name="M:System.Linq.QueryableExtensions.Exists``1(System.Linq.IQueryable{``0},ThinkNet.Infrastructure.ICriteria{``0})">
            <summary>
            根据查询条件是否存在相关数据
            </summary>
        </member>
        <member name="M:System.Linq.QueryableExtensions.Single``1(System.Linq.IQueryable{``0},ThinkNet.Infrastructure.ICriteria{``0})">
            <summary>
            获得单个实体
            </summary>
        </member>
        <member name="M:System.Linq.QueryableExtensions.Single``1(System.Linq.IQueryable{``0},ThinkNet.Infrastructure.IOrder{``0})">
            <summary>
            获得单个实体
            </summary>
        </member>
        <member name="M:System.Linq.QueryableExtensions.Single``1(System.Linq.IQueryable{``0},ThinkNet.Infrastructure.ICriteria{``0},ThinkNet.Infrastructure.IOrder{``0})">
            <summary>
            获得单个实体
            </summary>
        </member>
        <member name="M:System.Linq.QueryableExtensions.FindAll``1(System.Linq.IQueryable{``0})">
            <summary>
            获得所有实体
            </summary>
        </member>
        <member name="M:System.Linq.QueryableExtensions.FindAll``1(System.Linq.IQueryable{``0},ThinkNet.Infrastructure.IOrder{``0})">
            <summary>
            获得符合条件的所有实体
            </summary>
        </member>
        <member name="M:System.Linq.QueryableExtensions.FindAll``1(System.Linq.IQueryable{``0},ThinkNet.Infrastructure.ICriteria{``0})">
            <summary>
            获得符合条件的所有实体
            </summary>
        </member>
        <member name="M:System.Linq.QueryableExtensions.FindAll``1(System.Linq.IQueryable{``0},ThinkNet.Infrastructure.ICriteria{``0},ThinkNet.Infrastructure.IOrder{``0})">
            <summary>
            获得符合条件的所有实体
            </summary>
        </member>
        <member name="M:System.Linq.QueryableExtensions.FindAll``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            获得指定数量的所有实体
            </summary>
        </member>
        <member name="M:System.Linq.QueryableExtensions.FindAll``1(System.Linq.IQueryable{``0},System.Int32,ThinkNet.Infrastructure.IOrder{``0})">
            <summary>
            获得符合条件的所有实体
            </summary>
        </member>
        <member name="M:System.Linq.QueryableExtensions.FindAll``1(System.Linq.IQueryable{``0},System.Int32,ThinkNet.Infrastructure.ICriteria{``0})">
            <summary>
            获得符合条件的所有实体
            </summary>
        </member>
        <member name="M:System.Linq.QueryableExtensions.FindAll``1(System.Linq.IQueryable{``0},System.Int32,ThinkNet.Infrastructure.ICriteria{``0},ThinkNet.Infrastructure.IOrder{``0})">
            <summary>
            获得符合条件的所有实体
            </summary>
        </member>
        <member name="M:System.Linq.QueryableExtensions.FindAll``1(System.Linq.IQueryable{``0},ThinkNet.Infrastructure.IOrder{``0},System.Int32,System.Int32)">
            <summary>
            获得符合条件的所有实体
            </summary>
        </member>
        <member name="M:System.Linq.QueryableExtensions.FindAll``1(System.Linq.IQueryable{``0},ThinkNet.Infrastructure.ICriteria{``0},ThinkNet.Infrastructure.IOrder{``0},System.Int32,System.Int32)">
            <summary>
            获得符合条件的所有实体
            </summary>
        </member>
        <member name="T:System.Web.HttpRequestExtensions">
            <summary>
            扩展 <see cref="T:System.Web.HttpRequest"/> 类，该类包含客户端在 Web 请求中发送的 HTTP 值。
            </summary>
        </member>
        <member name="M:System.Web.HttpRequestExtensions.IsPost(System.Web.HttpRequest)">
            <summary>
            判断当前页面是否接收到了 POST 请求
            </summary>
            <param name="request">一个包含客户端在 Web 请求中发送的 HTTP 值的对象。</param>
            <returns>是否接收到了POST请求</returns>
        </member>
        <member name="M:System.Web.HttpRequestExtensions.IsGet(System.Web.HttpRequest)">
            <summary>
            判断当前页面是否接收到了 GET 请求
            </summary>
            <param name="request">一个包含客户端在 Web 请求中发送的 HTTP 值的对象。</param>
            <returns>是否接收到了GET请求。</returns>
        </member>
        <member name="M:System.Web.HttpRequestExtensions.IsAjaxRequest(System.Web.HttpRequest)">
            <summary>
            判断指定的 HTTP 请求是否为 AJAX 请求。
            </summary>
            <param name="request">一个包含客户端在 Web 请求中发送的 HTTP 值的对象。</param>
            <returns>是否接收到了AJAX请求。</returns>
        </member>
        <member name="M:System.Web.HttpRequestExtensions.GetString(System.Web.HttpRequest,System.String)">
            <summary>
            获取 <see cref="P:System.Web.HttpRequest.QueryString"/>、<see cref="P:System.Web.HttpRequest.Form"/>、<see cref="P:System.Web.HttpRequest.ServerVariables"/> 和 <see cref="P:System.Web.HttpRequest.Cookies"/> 项的集合中具有指定键的项。
            </summary>
            <param name="request">一个包含客户端在 Web 请求中发送的 HTTP 值的对象。</param>
            <param name="name">键值</param>
            <returns>该键值对应的值。</returns>
        </member>
        <member name="M:System.Web.HttpRequestExtensions.GetFormString(System.Web.HttpRequest,System.String)">
            <summary>
            获得指定表单参数的值
            </summary>
            <param name="request">一个包含客户端在 Web 请求中发送的 HTTP 值的对象。</param>
            <param name="name">表单参数</param>
            <returns>表单参数的值</returns>
        </member>
        <member name="M:System.Web.HttpRequestExtensions.GetQueryString(System.Web.HttpRequest,System.String)">
            <summary>
            获得指定Url参数的值
            </summary>
            <param name="request">一个包含客户端在 Web 请求中发送的 HTTP 值的对象。</param>
            <param name="name">Url参数</param>
            <returns>Url参数的值</returns>
        </member>
        <member name="M:System.Web.HttpRequestExtensions.GetIP(System.Web.HttpRequest)">
            <summary>
            获得当前页面客户端的IP
            </summary>
            <param name="request">一个包含客户端在 Web 请求中发送的 HTTP 值的对象。</param>
            <returns>当前页面客户端的IP</returns>
        </member>
        <member name="T:System.Collections.Generic.EnumerableExtentions">
            <summary>
            <see cref="T:System.Collections.IEnumerable"/> 的扩展类
            </summary>
        </member>
        <member name="M:System.Collections.Generic.EnumerableExtentions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历结果集
            </summary>
        </member>
        <member name="T:System.Collections.EnumerableExtentions">
            <summary>
            <see cref="T:System.Collections.IEnumerable"/> 的扩展类
            </summary>
        </member>
        <member name="M:System.Collections.EnumerableExtentions.ToEntity``1(System.Collections.IDictionary)">
            <summary>
            将字典数据映射成对应的实体
            </summary>
        </member>
        <member name="M:System.Collections.EnumerableExtentions.ToEntity``1(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            将字典数据映射成对应的实体
            </summary>
        </member>
        <member name="M:System.Collections.EnumerableExtentions.ToEntity(System.Collections.IDictionary,System.Type)">
            <summary>
            将字典数据映射成对应的实体
            </summary>
        </member>
        <member name="M:System.Collections.EnumerableExtentions.ToEntity(System.Collections.IDictionary,System.Type,System.Collections.IDictionary)">
            <summary>
            将字典数据映射成对应的实体
            </summary>
        </member>
        <member name="M:System.Collections.EnumerableExtentions.ToEntities``1(System.Collections.IList)">
            <summary>
            将字典集合数据映射成对应的实体
            </summary>
        </member>
        <member name="M:System.Collections.EnumerableExtentions.ToEntities``1(System.Collections.IList,System.Collections.IDictionary)">
            <summary>
            将字典集合数据映射成对应的实体
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.ObjectContainerExtentions">
            <summary>
            <see cref="T:ThinkNet.Infrastructure.IObjectContainer"/> 扩展方法
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainerExtentions.RegisterInstance``1(ThinkNet.Infrastructure.IObjectContainer,``0)">
            <summary>
            注册一个实例
            </summary>
            <typeparam name="T">注册类型</typeparam>
            <param name="that">容器</param>
            <param name="instance">该类型的实例</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainerExtentions.RegisterInstance``1(ThinkNet.Infrastructure.IObjectContainer,System.String,``0)">
            <summary>
            注册一个实例
            </summary>
            <typeparam name="T">注册类型</typeparam>
            <param name="that">容器</param>
            <param name="name">注册的名称</param>
            <param name="instance">该类型的实例</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainerExtentions.RegisterType``1(ThinkNet.Infrastructure.IObjectContainer,ThinkNet.Infrastructure.LifetimeStyle)">
            <summary>
            注册一个类型
            </summary>
            <typeparam name="T">注册类型</typeparam>
            <param name="that">容器</param>
            <param name="lifetimeStyle">生命周期类型</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainerExtentions.RegisterType``1(ThinkNet.Infrastructure.IObjectContainer,System.String,ThinkNet.Infrastructure.LifetimeStyle)">
            <summary>
            注册一个类型
            </summary>
            <typeparam name="T">注册类型</typeparam>
            <param name="that">容器</param>
            <param name="name">注册的名称</param>
            <param name="lifetimeStyle">生命周期类型</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainerExtentions.RegisterType``2(ThinkNet.Infrastructure.IObjectContainer,ThinkNet.Infrastructure.LifetimeStyle)">
            <summary>
            注册一个类型
            </summary>
            <typeparam name="TFrom">注册类型</typeparam>
            <typeparam name="TTo">目标类型</typeparam>
            <param name="that">容器</param>
            <param name="lifetime">生命周期类型</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainerExtentions.RegisterType``2(ThinkNet.Infrastructure.IObjectContainer,System.String,ThinkNet.Infrastructure.LifetimeStyle)">
            <summary>
            注册一个类型
            </summary>
            <typeparam name="TFrom">注册类型</typeparam>
            <typeparam name="TTo">目标类型</typeparam>
            <param name="that">容器</param>
            <param name="name">注册的名称</param>
            <param name="lifetime">生命周期类型</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainerExtentions.IsRegistered``1(ThinkNet.Infrastructure.IObjectContainer)">
            <summary>
            判断此类型是否已注册
            </summary>
            <typeparam name="T">注册类型</typeparam>
            <param name="that">容器</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainerExtentions.IsRegistered``1(ThinkNet.Infrastructure.IObjectContainer,System.String)">
            <summary>
            判断此类型是否已注册
            </summary>
            <typeparam name="T">注册类型</typeparam>
            <param name="that">容器</param>
            <param name="name">注册的名称</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainerExtentions.Resolve``1(ThinkNet.Infrastructure.IObjectContainer)">
            <summary>
            获取类型对应的实例
            </summary>
            <typeparam name="T">注册类型</typeparam>
            <param name="that">容器</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainerExtentions.Resolve``1(ThinkNet.Infrastructure.IObjectContainer,System.String)">
            <summary>
            获取类型对应的实例
            </summary>
            <typeparam name="T">注册类型</typeparam>
            <param name="that">容器</param>
            <param name="name">注册的名称</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainerExtentions.ResolveAll``1(ThinkNet.Infrastructure.IObjectContainer)">
            <summary>
            获取类型所有的实例
            </summary>
            <typeparam name="T">注册类型</typeparam>
            <param name="that">容器</param>
        </member>
        <member name="T:System.ObjectExtentions">
            <summary>
            对 <see cref="T:System.Object"/> 的扩展
            </summary>
        </member>
        <member name="M:System.ObjectExtentions.MustNotNull(System.Object,System.String)">
            <summary>
            名称为<paramref name="variableName"/>的参数或变量的值（<paramref name="obj"/>）不能是空引用。
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Serialization.SerializerExtensions">
            <summary>
            序列化器的扩展。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Serialization.SerializerExtensions.Deserialize``1(ThinkNet.Infrastructure.Serialization.IBinarySerializer,System.Byte[])">
            <summary>
            反序列化一个对象类型从一个字节数组。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Serialization.SerializerExtensions.Serialize``1(ThinkNet.Infrastructure.Serialization.ITextSerializer,``0)">
            <summary>
            Serializes the given data object as a string.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Serialization.SerializerExtensions.Serialize(ThinkNet.Infrastructure.Serialization.ITextSerializer,System.Object)">
            <summary>
            Serializes the given data object as a string.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Serialization.SerializerExtensions.Deserialize``1(ThinkNet.Infrastructure.Serialization.ITextSerializer,System.String)">
            <summary>
            Deserializes the specified string into an object of type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Serialization.SerializerExtensions.Deserialize(ThinkNet.Infrastructure.Serialization.ITextSerializer,System.String)">
            <summary>
            Deserializes the specified string into an object.
            </summary>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            <see cref="T:System.String"/> 的扩展类
            </summary>
        </member>
        <member name="M:System.StringExtensions.MustNotEmpty(System.String,System.String)">
            <summary>
            名称为<paramref name="variableName"/>的参数或变量的值（<paramref name="str"/>）不能是空值。
            </summary>
        </member>
        <member name="M:System.StringExtensions.MustNotNullOrEmpty(System.String,System.String)">
            <summary>
            名称为<paramref name="variableName"/>的参数或变量的值（<paramref name="str"/>）不能是空引用或者空值。
            </summary>
        </member>
        <member name="M:System.StringExtensions.TrueLength(System.String)">
            <summary>
            返回字符串真实长度, 1个汉字长度为2
            </summary>
        </member>
        <member name="M:System.StringExtensions.Cutting(System.String,System.Int32,System.String)">
            <summary>
            取指定长度的字符串，超过部分替代
            </summary>
            <param name="str">原字符串</param>
            <param name="len">指定长度</param>
            <param name="tail">用于替换的字符串</param>
        </member>
        <member name="M:System.StringExtensions.IsNumeric(System.String)">
            <summary>
            判定字符串是不是数值型
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsDate(System.String)">
            <summary>
            判断字符串是不是yyyy-mm-dd字符串
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsTime(System.String)">
            <summary>
            判断字符串是不是时间格式
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsDateTime(System.String)">
            <summary>
            判断字符串是不是日期模式
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsDecimal(System.String)">
            <summary>
            判断字符串是不是小数类型
            </summary>
        </member>
        <member name="M:System.StringExtensions.IsEmail(System.String)">
            <summary>
            检测是否符合email格式
            </summary>
        </member>
        <member name="M:System.StringExtensions.ToBoolean(System.String)">
            <summary>
            转换为bool型
            </summary>
        </member>
        <member name="M:System.StringExtensions.ToBoolean(System.String,System.Boolean)">
            <summary>
            转换为bool型
            </summary>
            <param name="str">要转换的字符串</param>
            <param name="value">默认值</param>
            <returns>转换后的bool类型结果</returns>
        </member>
        <member name="M:System.StringExtensions.ToInt(System.String)">
            <summary>
            转换为Int32类型
            </summary>
        </member>
        <member name="M:System.StringExtensions.ToInt(System.String,System.Int32)">
            <summary>
            转换为Int32类型
            </summary>
            <param name="str">要转换的字符串</param>
            <param name="value">缺省值</param>
            <returns>转换后的int类型结果</returns>
        </member>
        <member name="M:System.StringExtensions.ToDecimal(System.String)">
            <summary>
            转换为decimal型
            </summary>
        </member>
        <member name="M:System.StringExtensions.ToDecimal(System.String,System.Decimal)">
            <summary>
            转换为decimal型
            </summary>
            <param name="str">要转换的字符串</param>
            <param name="value">缺省值</param>
        </member>
        <member name="M:System.StringExtensions.ToDate(System.String)">
            <summary>
            转换为DateTime型
            </summary>
        </member>
        <member name="M:System.StringExtensions.ToDate(System.String,System.DateTime)">
            <summary>
            转换为DateTime型
            </summary>
            <param name="str">要转换的字符串</param>
            <param name="value">缺省值</param>
        </member>
        <member name="T:ThinkNet.Infrastructure.PageResult`1">
            <summary>
            表示分页数据
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.PageResult`1.Empty">
            <summary>
            空数据
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.PageResult`1.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            构造实例
            </summary>
            <param name="totalRecords">总记录个数</param>
            <param name="pageSize">每页显示记录</param>
            <param name="pageIndex">当前页索引</param>
            <param name="data">页面数据</param>
        </member>
        <member name="P:ThinkNet.Infrastructure.PageResult`1.TotalRecords">
            <summary>
            获取或设置总记录数。
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.PageResult`1.TotalPages">
            <summary>
            获取或设置页数。
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.PageResult`1.PageSize">
            <summary>
            获取或设置页面大小。
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.PageResult`1.PageIndex">
            <summary>
            获取或设置页码。
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.PageResult`1.Data">
            <summary>
            获取或设置页面数据
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Serialization.DefaultTextSerializer">
            <summary>
            <see cref="T:ThinkNet.Infrastructure.Serialization.ITextSerializer"/> 的默认实现。
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Serialization.ITextSerializer">
            <summary>
            表示一个序列化器。用来序列化对象的字符串形式
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Serialization.ITextSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            序列化一个对象到 <see cref="T:System.IO.TextWriter"/>
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Serialization.ITextSerializer.Deserialize(System.IO.TextReader)">
            <summary>
            从 <see cref="T:System.IO.TextReader"/> 反序列化一个对象。
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Serialization.DefaultTextSerializer.DefaultJavaScriptConverter">
            <summary>
            自定义类型转换器
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Serialization.DefaultTextSerializer.DefaultJavaScriptConverter.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Parameterized Constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Serialization.DefaultTextSerializer.DefaultJavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            将对象序列化成名称/值对的字典
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Serialization.DefaultTextSerializer.DefaultJavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)">
            <summary>
            将所提供的字典转换为指定类型的对象
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Serialization.DefaultTextSerializer.DefaultJavaScriptConverter.SupportedTypes">
            <summary>
            返回支持的类型
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Smtp.IMailClient">
            <summary>
            发送Mail的客户端工具接口
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Smtp.IMailClient.Send">
            <summary>
            发送邮件
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Smtp.IMailClient.Recipients">
            <summary>
            收件人列表
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Smtp.IMailClient.Attachments">
            <summary>
            附件列表
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Smtp.IMailClient.Subject">
            <summary>
            邮件主题
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Smtp.IMailClient.Body">
            <summary>
            邮件正文
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Smtp.IMailClient.HtmlFormat">
            <summary>
             是否Html格式邮件
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Smtp.MailAuthentication">
            <summary>
            邮件认证信息
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Smtp.MailAuthentication.MailServer">
            <summary>
            邮件服务器域名
            </summary>	
        </member>
        <member name="P:ThinkNet.Infrastructure.Smtp.MailAuthentication.Port">
            <summary>
            邮件服务器端口号
            </summary>	
        </member>
        <member name="P:ThinkNet.Infrastructure.Smtp.MailAuthentication.UserID">
            <summary>
            SMTP认证时使用的用户名
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Smtp.MailAuthentication.Password">
            <summary>
            SMTP认证时使用的密码
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Smtp.MailAuthentication.EnableSSL">
            <summary>
            是否安全连接
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Smtp.MailAuthentication.From">
            <summary>
            发件人地址
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Smtp.MailAuthentication.FromName">
            <summary>
            发件人名称
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Smtp.MailClient">
            <summary>
            发送Mail的客户端工具
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Smtp.MailClient.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Smtp.MailClient.#ctor(ThinkNet.Infrastructure.Smtp.MailAuthentication)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Smtp.MailClient.Send">
            <summary>
            发送
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Smtp.MailClient.Recipients">
            <summary>
            收件人列表
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Smtp.MailClient.Attachments">
            <summary>
            附件列表
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Smtp.MailClient.Subject">
            <summary>
            邮件主题
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Smtp.MailClient.Body">
            <summary>
            邮件正文
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Smtp.MailClient.HtmlFormat">
            <summary>
             是否Html格式邮件
            </summary>
        </member>
        <member name="E:ThinkNet.Infrastructure.Smtp.MailClient.SendCompleted">
            <summary>
            邮件发送完成后执行
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.TypePropertiesCache">
            <summary>
            类型属性集合的缓存
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.TypePropertiesCache.Instance">
            <summary>
            <see cref="T:ThinkNet.Infrastructure.TypePropertiesCache"/> 的一个实例。
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.TypePropertiesCache.GetProperties(System.Type)">
            <summary>
            获取该类型下所有属性
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.TypePropertiesCache.GetProperties(System.Type,System.Reflection.BindingFlags)">
            <summary>
            获取该类型下指定的所有属性
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.TypePropertiesCache.FindProperty(System.Type,System.String)">
            <summary>
            查找该类型下的属性
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.TypeUtils">
            <summary>
            A utility class provides type related methods.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.TypeUtils.IsAggregateRoot(System.Type)">
            <summary>Check whether a type is an aggregate root type.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.TypeUtils.IsRepositoryInterfaceType(System.Type)">
            <summary>Check whether a type is a repository type.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.TypeUtils.IsRepositoryType(System.Type)">
            <summary>Check whether a type is a repository.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.TypeUtils.IsCommand(System.Type)">
            <summary>
            Check whether a type is a command type.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.TypeUtils.IsCommandHandlerInterfaceType(System.Type)">
            <summary>
            Check whether a type is a command handler type.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.TypeUtils.IsCommandHandlerType(System.Type)">
            <summary>
            Check whether a type is a command handler.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.TypeUtils.IsEvent(System.Type)">
            <summary>
            Check whether a type is a event type.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.TypeUtils.IsEventHandlerInterfaceType(System.Type)">
            <summary>
            Check whether a type is a event handler type.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.TypeUtils.IsEventHandlerType(System.Type)">
            <summary>
            Check whether a type is a event handler.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.TypeUtils.GetObjectString(System.Object)">
            <summary>
            获取对象的字符串格式
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Utilities.Dispatcher">
            <summary>
            定时调度器
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Utilities.Dispatcher.Create(System.String,System.Action)">
            <summary>
            创建一个定时器
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Utilities.Dispatcher.SetInterval(System.Double)">
            <summary>
            重新设置任务间隔
            </summary>
            <param name="interval">间隔时间(毫秒)</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Utilities.Dispatcher.Start">
            <summary>
            Start the dispatcher
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Utilities.Dispatcher.Stop">
            <summary>
            Start the dispatcher
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Utilities.Dispatcher.Dispose">
            <summary>
            终止调度器
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.Utilities.Worker">
            <summary>
            后台循环执行一个特定的方法的工作器
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Utilities.Worker.Create(System.String,System.Action)">
            <summary>
            创建一个后台线程工作器
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Utilities.Worker.#ctor(System.String,System.Action)">
            <summary>Initialize a new Worker for the specified method to run.
            </summary>
            <param name="name">The name of worker.</param>
            <param name="action">The delegate method to execute in a loop.</param>
        </member>
        <member name="M:ThinkNet.Infrastructure.Utilities.Worker.Start">
            <summary>
            Start the worker.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Utilities.Worker.Stop">
            <summary>
            Stop the worker.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Utilities.Worker.Loop">
            <summary>Executes the delegate method until the <see cref="M:ThinkNet.Infrastructure.Utilities.Worker.Stop"/> method is called.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.Utilities.Worker.Dispose">
            <summary>
            终止工作器
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Utilities.Worker.IsAlive">
            <summary>
            返回当前工作状态
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.Utilities.Worker.Name">
            <summary>
            当前工作器名称
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Command">
            <summary>
            实现 <see cref="T:ThinkNet.Messaging.ICommand"/> 的抽象类
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Message">
            <summary>
            <see cref="T:ThinkNet.Messaging.IMessage"/> 的抽象实现类
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.IMessage">
            <summary>
            表示继承该接口的类型是一个消息。
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.IMessage.GetKey">
            <summary>
            获取命令的key值。
            </summary>
        </member>
        <member name="P:ThinkNet.Messaging.IMessage.Id">
            <summary>
            获取消息标识id
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Message.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Message.#ctor(System.String)">
            <summary>
            Parameterized Constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Message.ToString">
            <summary>
            输出消息的字符串格式
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Message.GetKey">
            <summary>
            获取消息的key值。
            </summary>
        </member>
        <member name="P:ThinkNet.Messaging.Message.Id">
            <summary>
            消息标识
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.ICommand">
            <summary>
            表示继承该接口的类型是一个命令。
            </summary>
        </member>
        <member name="P:ThinkNet.Messaging.ICommand.RetryCount">
            <summary>
            重试次数。
            </summary>
        </member>
        <member name="P:ThinkNet.Messaging.ICommand.ReturnType">
            <summary>
            命令处理结果类型。
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Command.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Command.#ctor(System.String)">
            <summary>
            Parameterized Constructor.
            </summary>
        </member>
        <member name="P:ThinkNet.Messaging.Command.RetryCount">
            <summary>
            重试次数。
            </summary>
        </member>
        <member name="P:ThinkNet.Messaging.Command.ReturnType">
            <summary>
            命令返回类型
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.CommandHandlerNotFoundException">
            <summary>
            表示一个当找不到命令处理程序的异常
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.CommandHandlerNotFoundException.#ctor(System.Type)">
            <summary>Parameterized constructor.
            </summary>
            <param name="commandType">The command type.</param>
        </member>
        <member name="T:ThinkNet.Messaging.CommandHandlerTooManyException">
            <summary>
            表示一个存在多个命令处理程序的异常
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.CommandHandlerTooManyException.#ctor(System.Type)">
            <summary>Parameterized constructor.
            </summary>
            <param name="commandType">The command type.</param>
        </member>
        <member name="T:ThinkNet.Messaging.CommandReturnType">
            <summary>
            命令处理类型
            </summary>
        </member>
        <member name="F:ThinkNet.Messaging.CommandReturnType.NotWait">
            <summary>
            Async
            </summary>
        </member>
        <member name="F:ThinkNet.Messaging.CommandReturnType.CommandExecuted">
            <summary>Return the command result when the command execution has the following cases:
            1. the command execution meets some error or exception;
            2. the command execution makes nothing changes of domain;
            3. the command execution success, and the domain event is sent to the message queue successfully.
            </summary>
        </member>
        <member name="F:ThinkNet.Messaging.CommandReturnType.DomainEventHandled">
            <summary>Return the command result when the command execution has the following cases:
            1. the command execution meets some error or exception;
            2. the command execution makes nothing changes of domain;
            3. the command execution success, and the domain event is handled.
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.DefaultCommandBus">
            <summary>
            <see cref="T:ThinkNet.Messaging.ICommandBus"/> 的实现。
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.ICommandBus">
            <summary>
            表示继承该接口的是命令总线
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.ICommandBus.Send(ThinkNet.Messaging.ICommand)">
            <summary>
            发送命令
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.ICommandBus.Send(System.Collections.Generic.IEnumerable{ThinkNet.Messaging.ICommand})">
            <summary>
            发送一组命令
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.DefaultCommandBus.#ctor(ThinkNet.Messaging.Handling.ICommandExecutor)">
            <summary>
            Parameterized Constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.DefaultCommandBus.Send(ThinkNet.Messaging.ICommand)">
            <summary>
            发布命令并执行
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.DefaultCommandBus.Send(System.Collections.Generic.IEnumerable{ThinkNet.Messaging.ICommand})">
            <summary>
            发布一组命令并执行
            </summary>
            <param name="commands"></param>
        </member>
        <member name="T:ThinkNet.Messaging.DefaultEventBus">
            <summary>
            <see cref="T:ThinkNet.Messaging.IEventBus"/> 的实现
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.IEventBus">
            <summary>
            表示继承该接口的是事件总线
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.IEventBus.Publish(ThinkNet.Messaging.IEvent)">
            <summary>
            发布事件
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.IEventBus.Publish(System.Collections.Generic.IEnumerable{ThinkNet.Messaging.IEvent})">
            <summary>
            发布事件
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.DefaultEventBus.#ctor(ThinkNet.Messaging.Handling.IEventExecutor)">
            <summary>
            Parameterized Constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.DefaultEventBus.Publish(ThinkNet.Messaging.IEvent)">
            <summary>
            发布事件
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.DefaultEventBus.Publish(System.Collections.Generic.IEnumerable{ThinkNet.Messaging.IEvent})">
            <summary>
            发布一组事件
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.DomainEvent`1">
            <summary>
            实现 <see cref="T:ThinkNet.Messaging.IDomainEvent"/> 的抽象类
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Event">
            <summary>
            实现 <see cref="T:ThinkNet.Messaging.IEvent"/> 的抽象类
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.IEvent">
            <summary>
            表示继承该接口的类型是一个事件。
            </summary>
        </member>
        <member name="P:ThinkNet.Messaging.IEvent.RetryCount">
            <summary>
            重试次数。
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Event.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Event.#ctor(System.String)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkNet.Messaging.Event.RetryCount">
            <summary>
            重试次数。
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.IDomainEvent">
            <summary>
            表示继承该接口的是一个领域事件
            </summary>
        </member>
        <member name="P:ThinkNet.Messaging.IDomainEvent.SourceId">
            <summary>
            领域事件的聚合来源id
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.DomainEvent`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.DomainEvent`1.#ctor(`0)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.DomainEvent`1.GetKey">
            <summary>
            获取领域事件的key值。
            </summary>
        </member>
        <member name="P:ThinkNet.Messaging.DomainEvent`1.SourceId">
            <summary>
            事件来源的标识id
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.EventHandlerNotFoundException">
            <summary>
            表示一个当找不到事件处理程序的异常
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.EventHandlerNotFoundException.#ctor(System.Type)">
            <summary>Parameterized constructor.
            </summary>
            <param name="eventType">The event type.</param>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.CommandHandled">
            <summary>
            表示完成命令程序处理后生成的事件统计。
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.CommandHandled.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.CommandHandled.#ctor(System.String,System.String[])">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.CommandHandled.GetKey">
            <summary>
            获取Key
            </summary>
        </member>
        <member name="P:ThinkNet.Messaging.Handling.CommandHandled.CommandId">
            <summary>
            命令ID
            </summary>
        </member>
        <member name="P:ThinkNet.Messaging.Handling.CommandHandled.SourceId">
            <summary>
            聚合ID
            </summary>
        </member>
        <member name="P:ThinkNet.Messaging.Handling.CommandHandled.EventIds">
            <summary>
            该命令生成的事件。
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.IEventHandler`1">
            <summary>
            表示继承该接口的类型为事件处理程序。
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.IEventHandler`1.Handle(`0)">
            <summary>
            处理事件。
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.CommandHandlerWrapper`1">
            <summary>
            命令处理程序的包装器
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.ICommandHandler">
            <summary>
            Represents a command handler.
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.IProxyHandler">
            <summary>
            Represents a handler proxy.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.IProxyHandler.GetInnerHandler">
            <summary>
            Get the inner handler.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.ICommandHandler.Handle(ThinkNet.Messaging.ICommand)">
            <summary>
            Handle the given command.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.CommandHandlerWrapper`1.#ctor(ThinkNet.Messaging.ICommandHandler{`0})">
            <summary>
            Parameterized Constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.CommandHandlerWrapper`1.Handle(`0)">
            <summary>
            Handles the given command with the provided context.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.CommandHandlerWrapper`1.GetInnerHandler">
            <summary>
            Returns the inner really command handler.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.CommandHandlerWrapper`1.Dispose(System.Boolean)">
            <summary>
            dispose
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.EventHandlerWrapper`1">
            <summary>
            事件处理程序的包装器
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.IEventHandler">
            <summary>
            Represents an event handler.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.IEventHandler.Handle(ThinkNet.Messaging.IEvent)">
            <summary>
            Handle the given event.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.EventHandlerWrapper`1.#ctor(ThinkNet.Messaging.IEventHandler{`0})">
            <summary>Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.EventHandlerWrapper`1.Handle(`0)">
            <summary>Handle the given event.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.EventHandlerWrapper`1.GetInnerHandler">
            <summary>Get the inner event handler.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.EventHandlerWrapper`1.Dispose(System.Boolean)">
            <summary>
            dispose
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.HandlerInfo">
            <summary>
            处理程序信息
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.HandlerInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.HandlerInfo.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.HandlerInfo.GetHashCode">
            <summary>
            返回此实例的哈希代码
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.HandlerInfo.Equals(System.Object)">
            <summary>
            确定此实例是否与指定的对象（也必须是 <see cref="T:ThinkNet.Messaging.Handling.HandlerInfo"/> 对象）相同。
            </summary>
        </member>
        <member name="P:ThinkNet.Messaging.Handling.HandlerInfo.CorrelationId">
            <summary>
            相关id
            </summary>
        </member>
        <member name="P:ThinkNet.Messaging.Handling.HandlerInfo.MessageTypeCode">
            <summary>
            消息类型编码
            </summary>
        </member>
        <member name="P:ThinkNet.Messaging.Handling.HandlerInfo.HandlerTypeCode">
            <summary>
            处理器类型编码
            </summary>
        </member>
        <member name="P:ThinkNet.Messaging.Handling.HandlerInfo.Timestamp">
            <summary>
            处理时间
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.IAggregateRootHandlerProvider">
            <summary>Defines a provider interface to provide the aggregate root internal handler.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.IAggregateRootHandlerProvider.GetEventHandler(System.Type,System.Type)">
            <summary>Get the internal event handler within the aggregate.
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.ICommandExecutor">
            <summary>
            继承该接口的是一个命令执行器
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.ICommandExecutor.Execute(ThinkNet.Messaging.ICommand)">
            <summary>
            执行给定的队列消息。
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.ICommandHandlerProvider">
            <summary>
            提供命令处理程序的接口。
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.IHandlerProvider`1">
            <summary>
            提供处理程序的接口。
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.IHandlerProvider`1.GetHandlers(System.Type)">
            <summary>
            获取该消息类型的所有的处理程序。
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.IEventExecutor">
            <summary>
            继承该接口的是一个事件执行器
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.IEventExecutor.Execute(ThinkNet.Messaging.IEvent)">
            <summary>
            执行给定的事件
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.IEventHandlerProvider">
            <summary>
            提供处理事件程序的接口。
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.IHandlerInfoStore">
            <summary>
            存储处理程序信息的接口
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.IHandlerInfoStore.AddHandlerInfo(ThinkNet.Messaging.Handling.HandlerInfo)">
            <summary>
            添加处理程序信息
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.IHandlerInfoStore.IsHandlerInfoExist(ThinkNet.Messaging.Handling.HandlerInfo)">
            <summary>
            检查该处理程序信息是否存在
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.IHandlerInterceptor`1">
            <summary>
            表示这是一个消息处理程序的拦截器。
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.IHandlerInterceptor`1.OnHandlerExecuting(`0)">
            <summary>
            在处理程序前执行
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.IHandlerInterceptor`1.OnHandlerExecuted(`0)">
            <summary>
            在处理程序后执行
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.DefaultAggregateRootHandlerProvider">
            <summary>
            处理聚合根内部事件程序的实现类
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.DefaultAggregateRootHandlerProvider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.DefaultAggregateRootHandlerProvider.Initialize(ThinkNet.Infrastructure.IObjectContainer,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.DefaultAggregateRootHandlerProvider.RegisterType(System.Type,ThinkNet.Infrastructure.IObjectContainer)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.DefaultAggregateRootHandlerProvider.GetEventHandler(System.Type,System.Type)">
            <summary>
            获取聚合内部事件处理器
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.DefaultCommandHandlerProvider">
            <summary>
            提供命令处理程序的类
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.HandlerProvider`1">
            <summary>
            处理程序的实现类
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.HandlerProvider`1.#ctor(System.Type,System.Type)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.HandlerProvider`1.Initialize(ThinkNet.Infrastructure.IObjectContainer,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.HandlerProvider`1.RegisterType(System.Type,ThinkNet.Infrastructure.IObjectContainer)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.HandlerProvider`1.IsGenericType(System.Type)">
            <summary>
            判断是否为事件处理接口
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.HandlerProvider`1.IsRegisterType(System.Type)">
            <summary>
            判断是否为事件处理程序类型
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.HandlerProvider`1.GetHandlers(System.Type)">
            <summary>
            获取该事件类型的处理器
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.DefaultCommandHandlerProvider.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.DefaultCommandHandlerProvider.IsGenericType(System.Type)">
            <summary>
            判断是否为命令处理接口
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.DefaultCommandHandlerProvider.IsRegisterType(System.Type)">
            <summary>
            判断是否为命令处理程序类型
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.DefaultCommandExecutor">
            <summary>
            <see cref="T:ThinkNet.Messaging.Handling.ICommandExecutor"/> 的默认实现。
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.DefaultCommandExecutor.#ctor(ThinkNet.Messaging.Handling.ICommandHandlerProvider,ThinkNet.Messaging.Handling.IHandlerInfoStore,ThinkNet.Infrastructure.ITypeCodeProvider,ThinkNet.Infrastructure.Logging.ILoggerFactory)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.DefaultCommandExecutor.Execute(ThinkNet.Messaging.ICommand)">
            <summary>
            执行命令
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.DefaultEventExecutor">
            <summary>
            <see cref="T:ThinkNet.Messaging.Handling.IEventExecutor"/> 的实现。
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.DefaultEventExecutor.#ctor(ThinkNet.Messaging.Handling.IEventHandlerProvider,ThinkNet.Messaging.Handling.IHandlerInfoStore,ThinkNet.Infrastructure.ITypeCodeProvider,ThinkNet.Infrastructure.Logging.ILoggerFactory)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.DefaultEventExecutor.Execute(ThinkNet.Messaging.IEvent)">
            <summary>
            执行事件。
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.DefaultEventHandlerProvider">
            <summary>
            提供事件处理程序的类
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.DefaultEventHandlerProvider.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.DefaultEventHandlerProvider.IsGenericType(System.Type)">
            <summary>
            判断是否为事件处理接口
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.DefaultEventHandlerProvider.IsRegisterType(System.Type)">
            <summary>
            判断是否为事件处理程序类型
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.DefaultHandlerInfoStore">
            <summary>
            将已完成的处理程序信息记录在数据库中。
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.Handling.HandlerInfoInMemory">
            <summary>
            将已完成的处理程序信息记录在内存中。
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.HandlerInfoInMemory.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.HandlerInfoInMemory.AddHandlerInfo(ThinkNet.Messaging.Handling.HandlerInfo)">
            <summary>
            添加处理程序信息
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.HandlerInfoInMemory.IsHandlerInfoExist(ThinkNet.Messaging.Handling.HandlerInfo)">
            <summary>
            检查该处理程序信息是否存在
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.DefaultHandlerInfoStore.#ctor(ThinkNet.Database.IDbContextFactory)">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.DefaultHandlerInfoStore.AddHandlerInfo(ThinkNet.Messaging.Handling.HandlerInfo)">
            <summary>
            添加处理程序信息
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.Handling.DefaultHandlerInfoStore.IsHandlerInfoExist(ThinkNet.Messaging.Handling.HandlerInfo)">
            <summary>
            检查该处理程序信息是否存在
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.ICommandHandler`1">
            <summary>
            表示继承该接口的类型为命令处理器。
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.ICommandHandler`1.Handle(`0)">
            <summary>
            处理命令。
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.IVersionedEvent">
            <summary>
            表示继承该接口的类型是一个有序事件。
            </summary>
        </member>
        <member name="P:ThinkNet.Messaging.IVersionedEvent.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="T:ThinkNet.Messaging.VersionedEvent`1">
            <summary>
            实现有序事件接口的抽象类
            </summary>
        </member>
        <member name="M:ThinkNet.Messaging.VersionedEvent`1.ToString">
            <summary>
            输出字符串信息
            </summary>
        </member>
        <member name="P:ThinkNet.Messaging.VersionedEvent`1.Version">
            <summary>
            当前事件版本号
            </summary>
        </member>
        <member name="T:ThinkNet.ParticipateInContainerAttribute">
            <summary>
            表示该特性的类会被加入到IOC容器中
            </summary>
        </member>
        <member name="M:ThinkNet.ParticipateInContainerAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.ParticipateInContainerAttribute.#ctor(System.Boolean)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.ParticipateInContainerAttribute.#ctor(System.Type[])">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.ParticipateInContainerAttribute.RegisterType(ThinkNet.Infrastructure.IObjectContainer,System.Type,System.String)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkNet.ParticipateInContainerAttribute.RegisterType(ThinkNet.Infrastructure.IObjectContainer,System.Type,System.Type,System.String)">
            <summary>
            注册类型
            </summary>
        </member>
        <member name="M:ThinkNet.ParticipateInContainerAttribute.Register(ThinkNet.Infrastructure.IObjectContainer,System.Type,System.Func{System.Type,System.Boolean})">
            <summary>
            执行注册
            </summary>
        </member>
        <member name="P:ThinkNet.ParticipateInContainerAttribute.ScanningInterface">
            <summary>
            是否由系统搜索成员接口并注册到容器中
            </summary>
        </member>
        <member name="P:ThinkNet.ParticipateInContainerAttribute.RegisterTypes">
            <summary>
            注册的类型。如果指定，那么设置自动搜索接口成员的功能将无效
            </summary>
        </member>
        <member name="P:ThinkNet.ParticipateInContainerAttribute.RegisterName">
            <summary>
            注册的名称
            </summary>
        </member>
        <member name="P:ThinkNet.ParticipateInContainerAttribute.RegisterTypeName">
            <summary>
            使用类型名称
            </summary>
        </member>
        <member name="T:ThinkNet.ParticipateInRuntimeAttribute">
            <summary>
            标记程序集是否参与到引导程序中。
            </summary>
        </member>
        <member name="M:ThinkNet.ParticipateInRuntimeAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.ParticipateInRuntimeAttribute.#ctor(System.Byte)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="P:ThinkNet.ParticipateInRuntimeAttribute.Order">
            <summary>
            排序
            </summary>
        </member>
        <member name="T:ThinkNet.RequiredComponentAttribute">
            <summary>
            标记此特性的类型是运行时必须的组件。
            </summary>
        </member>
        <member name="M:ThinkNet.RequiredComponentAttribute.#ctor(System.Type)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.RequiredComponentAttribute.GetLifetimeStyle">
            <summary>
            获取实现类型的生命周期
            </summary>
        </member>
        <member name="P:ThinkNet.RequiredComponentAttribute.ImplementType">
            <summary>
            默认实现类型
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.IObjectContainer">
            <summary>
            对象容器接口
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.IObjectContainer.IsRegistered(System.Type)">
            <summary>
            判断此类型是否已注册
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.IObjectContainer.IsRegistered(System.Type,System.String)">
            <summary>
            判断此类型是否已注册
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.IObjectContainer.RegisterInstance(System.Type,System.Object)">
            <summary>
            注册一个类型
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.IObjectContainer.RegisterInstance(System.Type,System.Object,System.String)">
            <summary>
            注册一个类型
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.IObjectContainer.RegisterType(System.Type,ThinkNet.Infrastructure.LifetimeStyle)">
            <summary>
            注册一个类型
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.IObjectContainer.RegisterType(System.Type,System.String,ThinkNet.Infrastructure.LifetimeStyle)">
            <summary>
            注册一个类型
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.IObjectContainer.RegisterType(System.Type,System.Type,ThinkNet.Infrastructure.LifetimeStyle)">
            <summary>
            注册一个类型
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.IObjectContainer.RegisterType(System.Type,System.Type,System.String,ThinkNet.Infrastructure.LifetimeStyle)">
            <summary>
            注册一个类型
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.IObjectContainer.Resolve(System.Type)">
            <summary>
            获取类型对应的实例
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.IObjectContainer.Resolve(System.Type,System.String)">
            <summary>
            获取类型对应的实例
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.IObjectContainer.ResolveAll(System.Type)">
            <summary>
            获取类型所有的实例
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.LifetimeStyle">
            <summary>
            生命周期类型
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.LifetimeStyle.Transient">
            <summary>
            每次都构造一个新实例
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.LifetimeStyle.Singleton">
            <summary>
            单例
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.LifetimeStyle.PerThread">
            <summary>
            同一个线程
            </summary>
        </member>
        <member name="F:ThinkNet.Infrastructure.LifetimeStyle.PerRequest">
            <summary>
            同一个请求
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.LifeCycleAttribute">
            <summary>
            表示实例的生命周期的特性
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.LifeCycleAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.LifeCycleAttribute.#ctor(ThinkNet.Infrastructure.LifetimeStyle)">
            <summary>
            Parameterized constructor.
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.LifeCycleAttribute.GetLifetimeStyle(System.Type)">
            <summary>
            获取生命周期
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.LifeCycleAttribute.Lifetime">
            <summary>
            返回生命周期类型(默认为Singleton)
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.NonRegisteredAttribute">
            <summary>
            表示该特性的类不会被注册。
            </summary>
        </member>
        <member name="T:ThinkNet.Infrastructure.ObjectContainer">
            <summary>
            <see cref="T:ThinkNet.Infrastructure.IObjectContainer"/>抽象实现类
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainer.Resolve(System.Type)">
            <summary>
            获取类型对应的实例
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainer.Resolve(System.Type,System.String)">
            <summary>
            获取类型对应的实例
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainer.ResolveAll(System.Type)">
            <summary>
            获取类型所有的实例
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainer.RegisterInstance(System.Type,System.Object)">
            <summary>
            注册一个实例
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainer.RegisterInstance(System.Type,System.Object,System.String)">
            <summary>
            注册一个实例
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainer.RegisterType(System.Type,ThinkNet.Infrastructure.LifetimeStyle)">
            <summary>
            注册一个类型
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainer.RegisterType(System.Type,System.String,ThinkNet.Infrastructure.LifetimeStyle)">
            <summary>
            注册一个类型
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainer.RegisterType(System.Type,System.Type,ThinkNet.Infrastructure.LifetimeStyle)">
            <summary>
            注册一个类型
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainer.RegisterType(System.Type,System.Type,System.String,ThinkNet.Infrastructure.LifetimeStyle)">
            <summary>
            注册一个类型
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainer.IsRegistered(System.Type)">
            <summary>
            判断此类型是否已注册
            </summary>
        </member>
        <member name="M:ThinkNet.Infrastructure.ObjectContainer.IsRegistered(System.Type,System.String)">
            <summary>
            判断此类型是否已注册
            </summary>
        </member>
        <member name="P:ThinkNet.Infrastructure.ObjectContainer.Instance">
            <summary>
            single instance
            </summary>
        </member>
        <member name="T:ThinkNet.Utils">
            <summary>
            常用工具类
            </summary>
        </member>
        <member name="M:ThinkNet.Utils.IsIPV4(System.String)">
            <summary>
            判断是否为IPv4地址
            </summary>
        </member>
        <member name="M:ThinkNet.Utils.HtmlEncode(System.String)">
            <summary>
            返回 HTML 字符串的编码结果
            </summary>
            <param name="str">要转换的字符串</param>
            <returns>编码结果</returns>
        </member>
        <member name="M:ThinkNet.Utils.HtmlDecode(System.String)">
            <summary>
            返回 HTML 字符串的解码结果
            </summary>
            <param name="str">要转换的字符串</param>
            <returns>解码结果</returns>
        </member>
        <member name="M:ThinkNet.Utils.UrlEncode(System.String)">
            <summary>
            返回 URL 字符串的编码结果
            </summary>
            <param name="str">要转换的字符串</param>
            <returns>编码结果</returns>
        </member>
        <member name="M:ThinkNet.Utils.UrlDecode(System.String)">
            <summary>
            返回 URL 字符串的解码结果
            </summary>
            <param name="str">要转换的字符串</param>
            <returns>解码结果</returns>
        </member>
        <member name="M:ThinkNet.Utils.EncodeByBase64(System.String)">
            <summary>
            将字符串编码为Base64字符串
            </summary>
            <param name="str">要编码的字符串</param>
            <returns>编码结果</returns>
        </member>
        <member name="M:ThinkNet.Utils.DecodeByBase64(System.String)">
            <summary>
            将Base64字符串解码为普通字符串
            </summary>
            <param name="str">要解码的字符串</param>
            <returns>解码结果</returns>
        </member>
        <member name="M:ThinkNet.Utils.StrIIF(System.String,System.String)">
            <summary>
            如果前面的值为空，则返回后面的值
            </summary>
            <param name="strValue">当前值</param>
            <param name="defValue">如果为空或null时的值</param>
        </member>
        <member name="M:ThinkNet.Utils.StrSplit(System.String,System.String)">
            <summary>
            分割字符串
            </summary>
            <param name="str">字符串内容</param>
            <param name="split">分割字符</param>
            <returns>数组</returns>
        </member>
        <member name="M:ThinkNet.Utils.StrInArray(System.String,System.String[],System.Boolean)">
            <summary>
            判断指定字符串是否属于指定字符串数组中的一个元素
            </summary>
            <param name="strSearch">要查找的字符串</param>
            <param name="strArray">字符串数组</param>
            <param name="caseInsensetive">是否不区分大小写, true为不区分, false为区分</param>
        </member>
        <member name="M:ThinkNet.Utils.StrInArrayIndexof(System.String,System.String[],System.Boolean)">
            <summary>
            判断指定字符串在指定字符串数组中的位置
            </summary>
            <param name="strSearch">要查找的字符串</param>
            <param name="strArray">字符串数组</param>
            <param name="caseInsensetive">是否不区分大小写, true为不区分, false为区分</param>
        </member>
        <member name="M:ThinkNet.Utils.StrInArray(System.String,System.String,System.String,System.Boolean)">
            <summary>
            判断指定字符串是否属于指定字符串数组中的一个元素
            </summary>
            <param name="str">字符串</param>
            <param name="strarray">内部以逗号分割单词的字符串</param>
            <param name="strsplit">分割字符串</param>
            <param name="caseInsensetive">是否不区分大小写, true为不区分, false为区分</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:ThinkNet.Utils.StrInArray(System.String,System.String,System.String)">
            <summary>
            判断指定字符串是否属于指定字符串数组中的一个元素
            </summary>
            <param name="str">字符串</param>
            <param name="stringarray">内部以逗号分割单词的字符串</param>
            <param name="strsplit">分割字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:ThinkNet.Utils.StrInArray(System.String,System.String)">
            <summary>
            判断指定字符串是否属于指定字符串数组中的一个元素
            </summary>
            <param name="str">字符串</param>
            <param name="stringarray">内部以逗号(,)分割单词的字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:ThinkNet.Utils.StrInIPArray(System.String,System.String[])">
            <summary>
            返回指定IP是否在指定的IP数组所限定的范围内, IP数组内的IP地址可以使用*表示该IP段任意, 例如192.168.1.*
            </summary>
            <param name="ip">指定的IP地址</param>
            <param name="iparray">IP地址范围</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:ThinkNet.Utils.MD5(System.String)">
            <summary>
            MD5函数
            </summary>
            <param name="str">原始字符串</param>
            <returns>MD5结果</returns>
        </member>
        <member name="M:ThinkNet.Utils.FormatBytesStr(System.Int32)">
            <summary>
            格式化字节数字符串
            </summary>
            <param name="bytes">字节数</param>
        </member>
        <member name="M:ThinkNet.Utils.FormatDateStr(System.DateTime)">
            <summary>
            计算时间的差别
            </summary>
            <param name="date">日期</param>
        </member>
        <member name="M:ThinkNet.Utils.GetMapPath(System.String)">
            <summary>
            获得当前绝对路径
            </summary>
            <param name="strPath">指定的路径</param>
            <returns>绝对路径</returns>
        </member>
        <member name="M:ThinkNet.Utils.GetClientIP">
            <summary>
            获取客户端ip
            </summary>
        </member>
        <member name="M:ThinkNet.Utils.DirectoryExists(System.String)">
            <summary>
            判断目录是否存在
            </summary>
        </member>
        <member name="M:ThinkNet.Utils.FileExists(System.String)">
            <summary>
            判断文件是否存在
            </summary>
        </member>
        <member name="M:ThinkNet.Utils.FileMove(System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="sourceFileName">移动文件</param>
            <param name="destFileName">目标文件</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:ThinkNet.Utils.FileCopy(System.String,System.String)">
            <summary>
            复制文件
            </summary>
            <param name="sourceFileName">复制文件</param>
            <param name="destFileName">目标文件</param>
        </member>
        <member name="M:ThinkNet.Utils.FileDelete(System.String)">
            <summary>
            删除文件
            </summary>
        </member>
        <member name="M:ThinkNet.Utils.FileSize(System.String)">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="M:ThinkNet.Utils.ConvertType``1(System.Object)">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="M:ThinkNet.Utils.ConvertType(System.Object,System.Type)">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="M:ThinkNet.Utils.GenerateRandomCode(System.Int32)">
            <summary>
            随机字符串
            </summary>
        </member>
        <member name="M:ThinkNet.Utils.GenerateRandomNum(System.Int32)">
            <summary>
            随机数字
            </summary>
        </member>
        <member name="M:ThinkNet.Utils.EncryptByAES(System.String,System.String)">
            <summary>
            AES加密字符串
            </summary>
            <param name="encryptString">待加密的字符串</param>
            <param name="encryptKey">加密密钥</param>
            <returns>加密成功返回加密后的字符串,失败返回源串</returns>
        </member>
        <member name="M:ThinkNet.Utils.DecryptByAES(System.String,System.String)">
            <summary>
            AES解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串,失败返源串</returns>
        </member>
        <member name="M:ThinkNet.Utils.NewSequentialId">
            <summary>
            Creates a sequential GUID according to SQL Server's ordering rules.
            </summary>
        </member>
    </members>
</doc>
